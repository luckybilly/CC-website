webpackJsonp([0,1],{"+1/S":function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("CC的功能列表")]),s._v(" "),e("ol",[e("li",[s._v("支持组件间相互调用（不只是Activity跳转，支持任意指令的调用/回调）")]),s._v(" "),e("li",[s._v("支持组件调用与Activity、Fragment的生命周期关联")]),s._v(" "),e("li",[s._v("支持app间跨进程的组件调用(组件开发/调试时可单独作为app运行)")]),s._v(" "),e("li",[s._v("支持app间调用的开关（默认为关闭状态，调用CC.enableRemoteCC(true)打开）")]),s._v(" "),e("li",[s._v("支持同步/异步方式调用")]),s._v(" "),e("li",[s._v("支持同步/异步方式实现组件（异步实现也叫做：延时回调）")]),s._v(" "),e("li",[s._v("调用方式不受实现方式的限制（例如:可以同步调用另一个组件的异步实现功能。注：不要在主线程同步调用耗时操作）")]),s._v(" "),e("li",[s._v("支持添加自定义拦截器【包括：静态拦截器(全局拦截器)和动态拦截器(局部拦截器)】")]),s._v(" "),e("li",[s._v("支持超时设置")]),s._v(" "),e("li",[s._v("支持手动取消")]),s._v(" "),e("li",[s._v("编译时自动注册组件(IComponent)，无需手动维护组件注册表(使用ASM修改字节码的方式实现)")]),s._v(" "),e("li",[s._v("支持动态注册/反注册组件(IDynamicComponent)")]),s._v(" "),e("li",[s._v("支持组件间传递Fragment、自定义View等对象\n"),e("ul",[e("li",[s._v("不仅仅是获取Fragment、自定义View的对象，并支持后续的通信。")])])]),s._v(" "),e("li",[s._v("支持跨进程组件调用\n"),e("ul",[e("li",[s._v("给组件类添加一个注解标明组件所在进程名称即可，无需bindService，无需创建AIDL")]),s._v(" "),e("li",[s._v("添加注解的名称需要是AndroidManifest.xml中已存在的进程名称（即通过android:process标记了进程的四大组件），否则无效")]),s._v(" "),e("li",[s._v("调用跨进程组件的方式与调用当前进程中的组件相同，无需关注被调用者所在的进程")])])]),s._v(" "),e("li",[s._v("尽可能的解决了使用姿势不正确导致的crash，降低产品线上crash率：\n"),e("ul",[e("li",[s._v("组件调用处、回调处、组件实现处的crash全部在框架内部catch住")]),s._v(" "),e("li",[s._v("同步返回或异步回调的CCResult对象一定不为null，避免空指针")])])]),s._v(" "),e("li",[s._v("支持在组件中为不同actionName指定是否在主线程中运行")])])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},"/DIa":function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this.$createElement,t=this._self._c||s;return t("section",[t("h2",[this._v("IComponent介绍")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},"1sym":function(s,t,e){s.exports=e("qT4T")},"1v47":function(s,t,e){s.exports=e("aE4u")},"4bn/":function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this.$createElement,t=this._self._c||s;return t("section",[t("h2",[this._v("IComponent介绍")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},"5LCA":function(s,t,e){s.exports=e("nUvY")},"67Vr":function(s,t,e){s.exports=e("n1kV")},"6O31":function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("CCResult状态码清单")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("状态码")]),s._v(" "),e("th",{staticStyle:{"text-align":"left"}},[s._v("说明")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("0")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("CC调用成功")])]),s._v(" "),e("tr",[e("td",[s._v("1")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("CC调用成功，但业务逻辑判定为失败")])]),s._v(" "),e("tr",[e("td",[s._v("-1")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("保留状态码：默认的请求错误code")])]),s._v(" "),e("tr",[e("td",[s._v("-2")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("没有指定组件名称")])]),s._v(" "),e("tr",[e("td",[s._v("-3")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("result不该为null。例如：组件回调时使用 CC.sendCCResult(callId, null) 或 interceptor返回null")])]),s._v(" "),e("tr",[e("td",[s._v("-4")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("调用过程中出现exception，请查看logcat")])]),s._v(" "),e("tr",[e("td",[s._v("-5")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("指定的ComponentName没有找到")])]),s._v(" "),e("tr",[e("td",[s._v("-6")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("context为null，获取application失败，出现这种情况可以用CC.init(application)来初始化")])]),s._v(" "),e("tr",[e("td",[s._v("-7")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("(@Deprecated 从2.0.0版本开始废弃)跨app调用组件时，LocalSocket连接出错")])]),s._v(" "),e("tr",[e("td",[s._v("-8")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("已取消")])]),s._v(" "),e("tr",[e("td",[s._v("-9")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("已超时")])]),s._v(" "),e("tr",[e("td",[s._v("-10")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("component.onCall(cc) return false, 未调用CC.sendCCResult(callId, ccResult)方法")])]),s._v(" "),e("tr",[e("td",[s._v("-11")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("跨app组件调用时对象传输出错，可能是自定义类型没有共用，请查看Logcat")])]),s._v(" "),e("tr",[e("td",[s._v("-12")]),s._v(" "),e("td",{staticStyle:{"text-align":"left"}},[s._v("组件不支持该actionName。在IComponent.onCall(cc)方法中通过CCResult.errorUnsupportedActionName()来返回该error,参考"),e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/demo_component_b/src/main/java/com/billy/cc/demo/component/b/ComponentB.java#L62"}},[s._v("ComponentB")])])])])])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},"6tnH":function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this.$createElement,t=this._self._c||s;return t("section",[t("h2",[this._v("IComponent介绍")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},"7Q9z":function(s,t,e){s.exports=e("ylqn")},"84h9":function(s,t,e){s.exports=e("T8lJ")},"8Qys":function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this.$createElement,t=this._self._c||s;return t("section",[t("h2",[this._v("IComponent介绍")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},AJM0:function(s,t,e){s.exports=e("DuZZ")},D0Bx:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("CC演示demo")]),s._v(" "),e("p",[s._v("组件A打包在主app中，组件B为单独运行的组件app，下图演示了在主app中调用两者的效果，并将结果以Json的格式显示在下方。")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/luckybilly/CC/raw/master/demo-debug.apk"}},[s._v("demo下载(主工程,包含ComponentB之外的所有组件)")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/luckybilly/CC/raw/master/demo_component_b-debug.apk"}},[s._v("demo_component_b组件单独运行的App(Demo_B)下载")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/luckybilly/CC/raw/master/image/CC.gif",alt:"demo"}})])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},DuZZ:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("集成CC step2:创建组件")]),s._v(" "),e("hr"),s._v(" "),e("h2",[s._v("一、新业务、新建module")]),s._v(" "),e("h3",[s._v("1.1 在Android Studio中新建module")]),s._v(" "),e("p",[s._v("二选一：Phone & Tablet Module 或 Android Library")]),s._v(" "),e("h3",[s._v("1.2 在该module下的build.gradle中添加对cc-settings-2.gradle文件的依赖")]),s._v(" "),e("p",[s._v("将原来的")]),s._v(" "),s._m(0),s._v(" "),e("p",[s._v("替换成")]),s._v(" "),s._m(1),s._v(" "),e("h3",[s._v("1.3 继续修改此build.gradle文件，将applicationId去除或者按以下方式修改，否则在集成打包时会报错")]),s._v(" "),s._m(2),s._v(" "),e("h3",[s._v("1.4 创建组件module的debug目录")]),s._v(" "),s._m(3),s._v(" "),e("p",[s._v("debug目录将只在组件module作为application单独运行时才生效，作为library被打包到主app中或者单独打aar包时会自动排除debug目录下的代码和资源，对正式代码无污染")]),s._v(" "),s._m(4),s._v(" "),e("hr"),s._v(" "),e("p",[s._v("至此，组件module已创建完成，（若组件需要独立运行，并且不希望测试代码混在正式代码中，建议完成第4步）")]),s._v(" "),e("h3",[s._v("1.5 在主app module中按如下方式添加对组件module的依赖")]),s._v(" "),e("p",[s._v("注意：组件之间不要互相依赖")]),s._v(" "),s._m(5),s._v(" "),e("p",[s._v("按照此方式添加的依赖有以下特点：")]),s._v(" "),s._m(6),s._v(" "),e("h3",[s._v("1.6 创建组件类，向外暴露当前组件提供的服务")]),s._v(" "),s._m(7),s._v(" "),s._m(8),s._v(" "),e("p",[s._v("创建组件类的注意事项：")]),s._v(" "),e("ul",[s._m(9),s._v(" "),s._m(10),s._v(" "),s._m(11),s._v(" "),s._m(12),s._v(" "),e("li",[e("p",[e("font",{attrs:{color:"red"}},[s._v("不管是同步实现还是异步实现，每次onCall被调用后，必须调用CC.sendCCResult(callId, result)将调用结果发送给调用方")])],1),s._v(" "),e("ul",[e("li",[s._v("要确保在任何逻辑分支下都会调用，例如：if-elseif-else, try-catch-finally, activity被关闭导致服务中断等")]),s._v(" "),e("li",[s._v("原理是：对于外部来说组件相当于黑盒，每次调用都需要有一个调用结果返回")]),s._v(" "),e("li",[e("font",{attrs:{color:"red"}},[s._v("这一点是许多初学者容易忽视的，需要足够重视，code review时建议重点检查")])],1)])]),s._v(" "),s._m(13)]),s._v(" "),e("p",[s._v("至此，您已经学会如何创建一个新的组件module了。")]),s._v(" "),e("hr"),s._v(" "),e("p",[s._v("如果你负责的项目是一个正在迭代维护中的老项目，那接下来就请了解一下如何在不修改现有代码的前提下为已有的功能创建组件类供外部调用。")]),s._v(" "),e("h2",[s._v("二、老业务，新建组件类")]),s._v(" "),e("h3",[s._v("2.1 在该module下的build.gradle中添加对cc-settings-2.gradle文件的依赖")]),s._v(" "),e("p",[s._v("将原来的")]),s._v(" "),s._m(14),s._v(" "),e("p",[s._v("替换成")]),s._v(" "),s._m(15),s._v(" "),e("p",[s._v("或者")]),s._v(" "),s._m(16),s._v(" "),e("h3",[s._v("2.2 创建组件类，向外暴露当前组件提供的服务")]),s._v(" "),e("p",[s._v("创建组件类的方式与章节 1.5 相同，不再赘述")]),s._v(" "),e("p",[s._v("该组件类暴露的服务与单独组件module中的组件类功能一样，所以解耦并不是必须的。")]),s._v(" "),e("p",[s._v("如果老业务module中按业务模块划分应该被分为多个组件，可创建多个组件类，其对外暴露服务的效果等同于多个组件module")]),s._v(" "),e("p",[s._v("只是，到此为止，组件还未解耦和代码隔离，所以尚不能独立运行调试")]),s._v(" "),e("h3",[s._v("2.3 老业务module解耦成独立组件")]),s._v(" "),e("p",[s._v("这一步不是必须的，更不是马上就必须要做的，实际上，老项目的组件化改造是一个相当漫长的过程。")]),s._v(" "),e("p",[s._v("将组件从原module中解耦出去时，可参照新业务新module创建组件的方式，将老组件里的代码连同步骤2.2中创建的组件类一起解耦出去")]),s._v(" "),e("p",[s._v("解耦前后对其它组件无影响，所以，这个解耦过程可以利用业务迭代过程中的碎片空闲时间一步步来完成，尽量不占用大片连续时间。")])])},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("apply "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("plugin:")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'com.android.library'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//或")]),s._v("\napply "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("plugin:")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'com.android.application'")]),s._v("\n")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[this._v("apply "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[this._v("from:")]),this._v(" rootProject.file("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[this._v("'cc-settings-2.gradle'")]),this._v(")\n")])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("android {\n   defaultConfig {\n       "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//仅在以application方式编译时才添加applicationId属性")]),s._v("\n       "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (project.ext.runAsApp) { \n           applicationId "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'com.billy.cc.demo.component.a'")]),s._v("\n       }\n       "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//...")]),s._v("\n   }\n   "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//...")]),s._v("\n}\n")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[t("strong",[this._v("若不需要单独运行该组件module，可跳过此步骤")])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ul",[e("li",[s._v('将Android Studio的导航切换到"Project"模式')]),s._v(" "),e("li",[s._v("在module/src/main文件夹上点右键 -> 新建Directory，并命名为debug")]),s._v(" "),e("li",[s._v("继续在debug文件夹上通过右键新建Directory的方式在debug文件夹下创建2个文件夹：java和res")]),s._v(" "),e("li",[s._v("将module/src/main/AndroidManifest.xml文件复制到module/src/main/debug/AndroidManifest.xml")]),s._v(" "),e("li",[s._v("点击工具栏上的Sync按钮")]),s._v(" "),e("li",[s._v("在module/src/main/debug/java文件夹右键，创建com.billy.debug.DebugApplication.java"),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("DebugApplication")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Application")]),s._v(" ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onCreate")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("super")]),s._v(".onCreate();\n        CC.enableDebug(BuildConfig.DEBUG);\n        CC.enableVerboseLog(BuildConfig.DEBUG);\n        CC.enableRemoteCC(BuildConfig.DEBUG);\n    }\n}\n")])])]),s._v(" "),e("li",[s._v("在module/src/main/debug/java文件夹右键，创建com.billy.debug.DebugActivity.java"),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("DebugActivity")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AppCompatActivity")]),s._v(" ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("protected")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onCreate")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(@Nullable Bundle savedInstanceState)")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("super")]),s._v(".onCreate(savedInstanceState);\n        Toast.makeText("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"hello CC"')]),s._v(", Toast.LENGTH_SHORT).show();\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//需要单独安装运行，但不需要入口页面（只需要从主app中调用此组件）时，")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 可直接finish当前activity")]),s._v("\n        finish();\n    }\n}\n")])])]),s._v(" "),e("li",[s._v("将DebugApplication注册到module/src/main/debug/AndroidManifest.xml的application节点")]),s._v(" "),e("li",[s._v("将DebugActivity注册到module/src/main/debug/AndroidManifest.xml的application节点下，并设置为launcherActivity"),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-xml"}},[e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("manifest")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("xmlns:android")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"http://schemas.android.com/apk/res/android"')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("package")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"com.billy.android.component.user"')]),s._v(">")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("application")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:name")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"com.billy.debug.DebugApplication"')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:icon")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"@mipmap/ic_launcher"')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:label")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"@string/app_name"')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:theme")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"@style/AppTheme"')]),s._v(" >")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("activity")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:name")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"com.billy.debug.DebugActivity"')]),s._v(" >")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("intent-filter")]),s._v(">")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("action")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:name")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"android.intent.action.MAIN"')]),s._v("/>")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("category")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:name")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"android.intent.category.LAUNCHER"')]),s._v(" />")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("intent-filter")]),s._v(">")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("activity")]),s._v(">")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("application")]),s._v(">")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("manifest")]),s._v(">")]),s._v("\n")])])])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("ext.mainApp = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//标记为主app module")]),s._v("\napply "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("from:")]),s._v(" rootProject.file("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cc-settings-2.gradle'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//...")]),s._v("\n\ndependencies {\n    addComponent "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'demo_component_a'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//会默认添加依赖：project(':demo_component_a')")]),s._v("\n    addComponent "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'demo_component_kt'")]),s._v(", project("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("':demo_component_kt'")]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//module方式")]),s._v("\n    addComponent "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'demo_component_b'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'com.billy.demo:demo_b:1.1.0'")]),s._v("  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//maven方式")]),s._v("\n}\n")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("ul",[t("li",[this._v("方便：组件切换library和application方式编译时，只需在local.properties中进行设置，不需要修改app module中的依赖列表\n"),t("ul",[t("li",[this._v("运行主app module时会自动将【设置为以app方式编译的组件module】从依赖列表中排除")])])]),this._v(" "),t("li",[this._v("安全：避免调试时切换library和application方式修改主app中的依赖项被误提交到代码仓库，导致jenkins集成打包时功能缺失")]),this._v(" "),t("li",[this._v("隔离：避免直接调用组件中的代码及资源")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("新建一个类实现"),t("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/cc/src/main/java/com/billy/cc/core/component/IComponent.java",target:"_blank"}},[this._v("IComponent")]),this._v("接口即可")])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ComponentA")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("implements")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("IComponent")]),s._v(" ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" String "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getName")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//指定组件的名称")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ComponentA"')]),s._v(";\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onCall")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc)")]),s._v(" ")]),s._v("{\n    String actionName = cc.getActionName();\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (actionName) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"showActivity"')]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//响应actionName为"showActivity"的组件调用')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//跳转到页面：ActivityA")]),s._v("\n        CCUtil.navigateTo(cc, ActivityA.class);\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//返回处理结果给调用方")]),s._v("\n        CC.sendCCResult(cc.getCallId(), CCResult.success());\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//同步方式实现（在return之前听过CC.sendCCResult()返回组件调用结果），return false")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("false")]),s._v(";\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//其它actionName当前组件暂时不能响应，可以通过如下方式返回状态码为-12的CCResult给调用方")]),s._v("\n        CC.sendCCResult(cc.getCallId(), CCResult.errorUnsupportedActionName());\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("false")]),s._v(";\n    }\n  }\n}\n")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("li",[t("p",[this._v("需要保留无参构造方法")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("li",[t("p",[this._v("组件名称需要具备唯一性")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("li",[t("p",[this._v("actionName为组件向外暴露的服务名称，多个服务在onCall方法中用actionName区分，执行不同的处理逻辑")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("li",[t("p",[this._v("onCall方法的返回值是有特殊意义的，要慎重对待")]),this._v(" "),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[this._v("true: 异步实现\n    onCall方法执行完成后，CC框架会等待组件在未来的某个时间点调用CC.sendCCResult(callId, result)返回本次组件调用结果\nfalse: 同步实现\n    在return之前调用CC.sendCCResult(callId, result)返回本次组件调用结果，否则系统会返回-10的状态码给调用方\n")])])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("li",[e("p",[s._v("如果某个逻辑分支上没有调用到CC.sendCCResult发送本次调用的结果，将导致：")]),s._v(" "),e("ul",[e("li",[s._v("onCall方法返回true：\n"),e("ul",[e("li",[s._v("调用方是同步调用：\n"),e("ul",[e("li",[s._v("未设置超时时间：本次调用将耗时2秒后返回超时，状态码：-9")]),s._v(" "),e("li",[s._v("设置了超时时间且大于0：本次调用将在设置的超时时间后返回超时，状态码：-9")]),s._v(" "),e("li",[s._v("设置了超时时间为0：本次调用所在的线程将block在此处不得释放")])])]),s._v(" "),e("li",[s._v("调用方是异步调用：\n"),e("ul",[e("li",[s._v("未设置超时时间：本次调用的回调函数将不会被调用，并且CC的线程池被永久地占用掉了1个。并且每次都会占用1个线程，直至资源耗尽。")]),s._v(" "),e("li",[s._v("已设置超时时间且大于0：本次调用将在设置的超时时间后调用回调函数，返回超时，状态码：-9")])])])])]),s._v(" "),e("li",[s._v("onCall方法返回false：\n"),e("ul",[e("li",[s._v("不管调用方如何调用，将接收到CC框架返回的调用结果，状态码：-10")])])])])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("apply "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("plugin:")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'com.android.library'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//或")]),s._v("\napply "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("plugin:")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'com.android.application'")]),s._v("\n")])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("ext.mainApp = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//如果此module为主app module，则启用这一行")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//ext.alwaysLib = true //如果此module原来是一个library，被其它module所依赖，则启用这一行")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//以上2行根据具体情况启用其中一行")]),s._v("\napply "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("from:")]),s._v(" rootProject.file("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cc-settings-2.gradle'")]),s._v(")\n")])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//ext.mainApp = true //如果此module为主app module，则启用这一行")]),s._v("\next.alwaysLib = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//如果此module原来是一个library，被其它module所依赖，则启用这一行")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//以上2行根据具体情况启用其中一行")]),s._v("\napply "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("from:")]),s._v(" rootProject.file("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cc-settings-2.gradle'")]),s._v(")\n")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},"F/l1":function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("CC框架实践(1)：实现登录成功再进入目标界面")]),s._v(" "),e("p",[s._v("CC框架基因中自带支持组件层面的AOP，在定义组件时，实现IComponent.onCall(cc)方法，并根据cc中的参数来执行组件中的具体逻辑（如：页面跳转等）。")]),s._v(" "),e("p",[s._v("可以在调用具体逻辑之前对该功能进行AOP实现，例如：登录、页面数据预加载等")]),s._v(" "),e("h3",[s._v("用CC框架实现必须先登录再进入目标页面功能")]),s._v(" "),e("p",[s._v("目标页面所在的组件在执行页面跳转前调用登录组件(用户中心组件)获取用户信息，若未登录则登录后返回用户信息。")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("这里有2个点：\n1. 若用户已登录，则直接返回用户信息，同步方式实现即可\n2. 若用户未登录，则跳转到登录页面，需要执行完登录操作(或取消)后才能获得结果，使用异步方式实现。\n")])]),s._v(" "),e("p",[s._v("以打开订单列表页面前需要登录为例：")]),s._v(" "),e("ol",[e("li",[s._v("先定义用户组件，提供一个强制获取用户登录信息的功能，若未登录则打开登录界面，并在用户登录后返回登录结果(取消登录也是一种结果)")])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//用户中心组件类")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("UserComponent")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("implements")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("IComponent")]),s._v(" ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" String "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getName")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"demo.component.user"')]),s._v(";\n    }\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onCall")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc)")]),s._v(" ")]),s._v("{\n        String actionName = cc.getActionName();\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ... ")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 强制获取用户信息，若未登录则跳转到登录，并将登录结果返回")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"forceGetLoginUser"')]),s._v(".equals(actionName)) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!TextUtils.isEmpty(Global.loginUserName)) {\n                "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//已登录同步实现，直接调用CC.sendCCResult(...)并返回返回false")]),s._v("\n                CCResult result = CCResult.success(Global.KEY_USERNAME, Global.loginUserName);\n                CC.sendCCResult(cc.getCallId(), result);\n                "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("false")]),s._v(";\n            }\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//未登录，打开登录界面，在登录完成后再回调结果，异步实现")]),s._v("\n            Context context = cc.getContext();\n            Intent intent = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Intent(context, LoginActivity.class);\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!(context "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" Activity)) {\n                "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//调用方没有设置context或app间组件跳转，context为application")]),s._v("\n                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            }\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//将cc的callId传给Activity，登录完成后通过这个callId来回传结果")]),s._v("\n            intent.putExtra("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"callId"')]),s._v(", cc.getCallId());\n            context.startActivity(intent);\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//异步实现，不立即调用CC.sendCCResult,返回true")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("true")]),s._v(";\n        }\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//...")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("false")]),s._v(";\n    }\n\n}\n")])]),s._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[s._v("模拟的登录页面：点击按钮模拟登录，直接返回文本框中的信息作为登录成功的信息，若未登录直接返回，则视为取消登录")])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/**\n * 模拟登录页面\n */")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("LoginActivity")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AppCompatActivity")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("implements")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("View")]),s._v("."),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("OnClickListener")]),s._v(" ")]),s._v("{\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("private")]),s._v(" EditText editText;\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("private")]),s._v(" String callId;\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("protected")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onCreate")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(@Nullable Bundle savedInstanceState)")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("super")]),s._v(".onCreate(savedInstanceState);\n        setContentView(R.id.activity_login);\n        callId = intent.getStringExtra("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"callId"')]),s._v(");\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//init views")]),s._v("\n    }\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onClick")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(View v)")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//模拟登录：点击按钮获取文本框内容并作为用户登录信息返回")]),s._v("\n        String username = editText.getText().toString().trim();\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (TextUtils.isEmpty(username)) {\n            Toast.makeText("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", R.string.demo_b_username_hint, Toast.LENGTH_SHORT).show();\n        } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//登录成功，返回")]),s._v("\n            Global.loginUserName = username;\n            finish();\n        }\n    }\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("protected")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onDestroy")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("super")]),s._v(".onDestroy();\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//判断是否为CC调用打开本页面")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (callId != "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(") {\n            CCResult result;\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (TextUtils.isEmpty(Global.loginUserName)) {\n                result = CCResult.error("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"login canceled"')]),s._v(");\n            } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n                result = CCResult.success(Global.KEY_USERNAME, Global.loginUserName);\n            }\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//为确保不管登录成功与否都会调用CC.sendCCResult，在onDestroy方法中调用")]),s._v("\n            CC.sendCCResult(callId, result);\n        }\n    }\n}\n")])]),s._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[s._v("在订单组件中进行登录验证：登录成功，则跳转到订单列表页；登录失败，则返回调用失败的结果")])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//订单组件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("OrderComponent")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("implements")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("IComponent")]),s._v(" ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" String "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getName")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"demo.component.order"')]),s._v(";\n    }\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onCall")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc)")]),s._v(" ")]),s._v("{\n        CCResult result = CC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"demo.component.user"')]),s._v(")\n                .setActionName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"forceGetLoginUser"')]),s._v(")\n                .build()\n                .call();\n        CCResult ccResult;\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 根据登录状态决定是否打开页面")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里也可以添加更多的前置判断逻辑")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (result.isSuccess()) {\n            ccResult = CCResult.success();\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//登录成功，打开目标页面")]),s._v("\n            startOrderListActivity(cc);\n        } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//登录失败，返回失败信息")]),s._v("\n            ccResult = result;\n        }\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//调用方不需要获得额外的信息，只需要知道调用状态")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//所以这个组件采用同步实现：同步调用CC.sendCCResult(...) 并且返回false")]),s._v("\n        CC.sendCCResult(cc.getCallId(), ccResult);\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("false")]),s._v(";\n    }\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("startOrderListActivity")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc)")]),s._v(" ")]),s._v("{\n        Context context = cc.getContext();\n        Intent intent = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Intent(context, OrderListActivity.class);\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!(context "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" Activity)) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// context maybe an application object if caller dose not setContext")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// or call across apps")]),s._v("\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        }\n        context.startActivity(intent);\n    }\n}\n")])]),s._v(" "),e("p",[s._v("至此，打开订单页面必须登录的功能已全部完成。")]),s._v(" "),e("h2",[s._v("这样实现的好处")]),s._v(" "),e("ol",[e("li",[s._v("登录组件只管登录自身的逻辑，跟其它逻辑完全不耦合")]),s._v(" "),e("li",[s._v("调用订单组件的地方无需添加额外的代码")]),s._v(" "),e("li",[s._v("可以添加任意的前置条件判断")]),s._v(" "),e("li",[s._v("登录条件的判断可用于任意组件而无需修改登录组件的逻辑")]),s._v(" "),e("li",[s._v("支持跨app组件调用时的前置条件判断")])])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},IbfI:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this.$createElement,t=this._self._c||s;return t("section",[t("h2",[this._v("IComponent介绍")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},KHMt:function(s,t,e){s.exports=e("uvD0")},Kewn:function(s,t,e){s.exports=e("O/jy")},LMRd:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this.$createElement,t=this._self._c||s;return t("section",[t("h2",[this._v("IComponent介绍")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},MLFz:function(s,t,e){s.exports=e("tO2m")},MhgG:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h1",[s._v("CC框架实践(3): 让jsBridge更优雅")]),s._v(" "),e("h2",[s._v("前言")]),s._v(" "),e("p",[s._v("jsBridge是作为js和java之间通信的桥梁，本身它的职责只是完成通信。")]),s._v(" "),s._m(0),s._v(" "),e("p",[s._v("但在实际封装过程中，会发现需要我们需要解决很多耦合的问题：")]),s._v(" "),s._m(1),s._v(" "),s._m(2),s._v(" "),e("h2",[s._v("CC框架下如何让jsBridge更优雅？")]),s._v(" "),e("p",[s._v("CC框架为所有组件提供了统一的调用入口和回调结果格式。")]),s._v(" "),e("p",[s._v("所以，在CC框架下，js调用native变得很简单：")]),s._v(" "),s._m(3),s._v(" "),e("p",[s._v("流程图：")]),s._v(" "),s._m(4),s._v(" "),e("p",[s._v("JsBridge的核心代码如下：")]),s._v(" "),s._m(5),s._v(" "),e("p",[s._v("是不是超级简单？")]),s._v(" "),e("p",[s._v("这样做的好处有：")]),s._v(" "),s._m(6),s._v(" "),e("h2",[s._v("Tips")]),s._v(" "),e("h4",[s._v("1. 有些功能必须要在onActivityResult中接收结果，如何在组件内部实现而不影响jsBridge？")]),s._v(" "),e("p",[s._v("确实有些功能必须要在onActivityResult中接收结果，例如：调用系统的选择联系人、从系统相册选择图片等。")]),s._v(" "),e("p",[s._v("其实，不止是onActivityResult，还有获取权限的回调onRequestPermissionsResult")]),s._v(" "),s._m(7),s._v(" "),e("p",[e("font",{attrs:{color:"blue"}},[s._v("推荐使用Fragment方式实现")])],1),s._v(" "),e("p",[s._v("具体实现方式可参考如下开源库：")]),s._v(" "),s._m(8),s._v(" "),e("h4",[s._v("2. js调用的有些功能需要用户登录后才能用，如何加入登录条件判断？")]),s._v(" "),e("p",[s._v("按照组件化开发的思想，是否需要登录才能用应由各组件自行判断。")]),s._v(" "),e("p",[s._v("需要在组件内部完成登录状态校验、打开登录界面、登录完成后再执行组件实际功能。")]),s._v(" "),s._m(9),s._v(" "),e("h4",[s._v("3. 没有使用CC框架的情况下，如何让jsBridge实现类似效果？")]),s._v(" "),e("p",[s._v("在没有使用CC框架的情况下，也可以实现类似效果的。思路如下：")]),s._v(" "),s._m(10),s._v(" "),s._m(11),s._v(" "),s._m(12),s._v(" "),s._m(13),s._v(" "),s._m(14),s._v(" "),e("h2",[s._v("总结")]),s._v(" "),e("p",[s._v("本文介绍了在CC框架下用组件调用的方式让jsBridge实现跟具体业务完全解耦。并给出了非CC框架环境下实现类似效果的思路。")])])},staticRenderFns:[function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("本文不是介绍js与java通信过程的实现，你可以使用第三方库（"),t("a",{attrs:{href:"https://github.com/lzyzsd/JsBridge"}},[this._v("如：JsBridge")]),this._v("），也可以自己来实现，或者用addJavascriptInterface，都可以。本文的侧重点是如何让我们的jsBridge不那么臃肿，实现得更优雅，更利于维护。")])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ul",[e("li",[s._v("js调用的功能在其他module中，如何调用到这些功能，如何向jsbridge注册这些功能？")]),s._v(" "),e("li",[s._v("jsbridge依赖了太多module，怎么解耦？")]),s._v(" "),e("li",[s._v("当js调用的功能是打开其它页面获取该页面处理后的结果并回调给js，怎么破？ onResume? startActivityForResult? 一个常见的场景是：打开登录界面，登录成功后将用户信息回调给js。你是不是想过这样做？\n"),e("ul",[e("li",[s._v("jsBridge中封装一个Activity/Fragment")]),s._v(" "),e("li",[s._v("用startActivityForResult的方式来打开登录页面")]),s._v(" "),e("li",[s._v("在onActivityResult方法中从登录界面设置的result中获取用户登录的信息（或者onResume或EventBus方式来获取返回值）")]),s._v(" "),e("li",[s._v("然后将用户信息回调给js")])])])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[t("em",[this._v("将具体的业务逻辑写在jsBridge模块中，本身就是一个灾难，而且随着业务类型的增加，最后这个Activity/Fragment会变得非常臃肿，而且难以复用")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("ul",[t("li",[this._v("jsBridge仅暴露一个接口给js，那就是组件调用接口")]),this._v(" "),t("li",[this._v("js调用jsBridge的接口，将组件调用所需的参数传给jsBridge")]),this._v(" "),t("li",[this._v("jsBridge将参数透传去调用功能组件（所有功能实现均在各个组件内部完成）")]),this._v(" "),t("li",[this._v("jsBridge中接收到调用结果后，将结果转换成json回调给js")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/25/1608ca156a8b8517?w=559&h=446&f=png&s=16869",alt:"jsBridge调用流程"}})])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("JsBridge")]),s._v(" ")]),s._v("{\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("private")]),s._v(" WeakReference<WebView> webViewWeakReference;\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("JsBridge")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(WebView webView)")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".webViewWeakReference = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" WeakReference<WebView>(webView);\n    }\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@JavascriptInterface\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("callNativeCC")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(String componentName, String actionName, String dataJson, "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("final")]),s._v(" String callbackId)")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("final")]),s._v(" WebView webView = webViewWeakReference.get();\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (webView == "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(") {\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(";\n        }\n        Map<String, Object> params = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(";\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!TextUtils.isEmpty(dataJson)) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n                JSONObject json = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" JSONObject(dataJson);\n                params = JsonUtil.toMap(json); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//参数列表")]),s._v("\n            } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//统一使用这种方式进行CC调用，不用关心具体组件是如何实现的")]),s._v("\n        CC cc = CC.obtainBuilder(componentName)\n            .steActionName(actionName)\n            .setContext(webView.getContext()) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//可用于startActivity等需要Context的功能")]),s._v("\n            .setParams(params)\n            .build();\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (TextUtils.isEmpty(jsCallbackId)) {\n            cc.callAsync(); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//无需回调结果给js")]),s._v("\n        } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            cc.callAsyncCallbackOnMainThread("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" IComponentCallback() {\n                "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n                "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onResult")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc, CCResult result)")]),s._v(" ")]),s._v("{\n              "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//将结果回调给js")]),s._v("\n                    webView.loadUrl("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"javascript: callback("')]),s._v(" + callbackId + "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('","')]),s._v(" + result + "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('")"')]),s._v("); \n                }\n            });\n        }\n    }\n}\n\n")])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ol",[e("li",[s._v("jsbridge回归初心：只是作为一个桥梁。")]),s._v(" "),e("li",[s._v("jsBridge支持的功能更全面，app内部几乎所有组件的功能都可以给js调用，而无需添加额外的代码")]),s._v(" "),e("li",[s._v("业务完全在组件内部实现，jsbridge跟组件之间无耦合")]),s._v(" "),e("li",[s._v("无论功能是同步实现的还是异步回调实现的，中间需要经历什么样的流程，对于js和jsBridge来说调用方式完全一样。")]),s._v(" "),e("li",[s._v("支持组件的按需依赖：jsBridge不再是全家桶，给多个app使用时，各app可以按需选择需要支持js调用的组件，添加gradle依赖到主module的依赖列表中即可。")]),s._v(" "),e("li",[s._v("同一个组件在不同的app内可以有不同的实现，但需要保持接口协议一致，例如：不同app可以有自己特定的登录组件")]),s._v(" "),e("li",[s._v("后续添加新功能给js调用时，只要功能提供方实现一下，js中去调用即可，jsbridge组件无需修改")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("这些功能在组件内部实现时，可以在组件中通过创建一个透明的Activity或Fragment来实现结果的接收，然后将结果发送给调用方: "),t("code",{pre:!0},[this._v("CC.sendCCResult(callId, result);")])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ul",[e("li",[e("p",[s._v("透明Activity方式实现的权限申请库:"),e("a",{attrs:{href:"https://github.com/yanzhenjie/AndPermission"}},[s._v("AndPermission")]),s._v(", 参考类："),e("a",{attrs:{href:"https://github.com/yanzhenjie/AndPermission/blob/master/permission/src/main/java/com/yanzhenjie/permission/PermissionActivity.java"}},[s._v("PermissionActivity.java")])])]),s._v(" "),e("li",[e("p",[s._v("Fragment方式实现的权限申请库: "),e("a",{attrs:{href:"https://github.com/tbruyelle/RxPermissions"}},[s._v("RxPermissions")]),s._v(",参考类："),e("a",{attrs:{href:"https://github.com/tbruyelle/RxPermissions/blob/master/lib/src/main/java/com/tbruyelle/rxpermissions/RxPermissions.java"}},[s._v("RxPermissions.java")])])])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("具体实现可参考另一篇文章： "),t("a",{attrs:{href:"https://www.imooc.com/article/23155"}},[this._v("CC框架实践(1)：实现登录成功再进入目标界面功能")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("ol",[t("li",[this._v("在工程的Common基础库中定义一套接口，例如： IJsCall/IJsCallback")])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("IJsCall")]),s._v(" ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("String "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("name")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")])]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//功能的名称，供js调用")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("handleJsCall")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(JSONObject params, IJsCallback callback)")])]),s._v(";\n}\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("IJsCallback")]),s._v(" ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("callback")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(String result)")])]),s._v(";\n}\n")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("ol",{attrs:{start:"2"}},[t("li",[this._v("在所有需要注册给js调用的组件中实现IJsCall接口，实现具体的业务逻辑")]),this._v(" "),t("li",[this._v("在jsBridge中创建一个IJsCall的管理类JsCallMananger，示例代码：")])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("JsCallManager")]),s._v(" ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("final")]),s._v(" Map<String, IJsCall> map = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" HashMap<>();\n    \n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("static")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("final")]),s._v(" String DEFAULT_RESULT = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"{\\"success\\":false}"')]),s._v(";\n    \n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("init")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//用于IJsCall自动注册到list")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//使用AutoRegister插件将生成如下代码：")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// registerJsCall(new JsCallA());")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// registerJsCall(new JsCallB());")]),s._v("\n    }\n    \n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("registerJsCall")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(IJsCall call)")]),s._v(" ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (call != "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(") {\n            map.put(call.name(), call);\n        }\n    }\n    \n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onJsCall")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(String name, JSONObject json, IJsCallback callback)")]),s._v(" ")]),s._v("{\n        IJsCall jsCall = map.get(name);\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (jsCall != "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(") {\n            jsCall.handleJsCall(json, callback);\n        } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            callback.callback(DEFAULT_RESULT);\n        }\n    }\n}\n")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("ol",{attrs:{start:"4"}},[t("li",[this._v("使用AutoRegister来完成IJsCall接口的自动注册, "),t("a",{attrs:{href:"https://github.com/luckybilly/AutoRegister"}},[this._v("Github源码")])]),this._v(" "),t("li",[this._v("在jsBridge中只暴露一个接口给js调用")]),this._v(" "),t("li",[this._v("在jsBridge中调用JsCallManager.onJsCall方法来实现统一的功能调用")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},My28:function(s,t,e){s.exports=e("gJJx")},N3O9:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this.$createElement,t=this._self._c||s;return t("section",[t("h2",[this._v("IComponent介绍")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},NJs9:function(s,t,e){s.exports=e("PFDx")},"O/jy":function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("集成CC step3:调用组件")]),s._v(" "),e("p",[s._v("调用组件分为同步调用和异步调用2种方式")]),s._v(" "),e("ul",[e("li",[s._v("同步调用：调用方将用同步的方式获得返回的调用结果")]),s._v(" "),e("li",[s._v("异步调用：调用方通过回调接收组件的调用结果")])]),s._v(" "),e("p",[s._v("示例如下：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//同步调用，直接返回结果")]),s._v("\nCCResult result = CC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ComponentA"')]),s._v(")\n        .setActionName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"showActivity"')]),s._v(")\n        .build()\n        .call();\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//或 异步调用，不需要回调结果")]),s._v("\nString callId = CC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ComponentA"')]),s._v(")\n        .setActionName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"showActivity"')]),s._v(")\n        .build()\n        .callAsync();\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//或 异步调用，在子线程执行回调")]),s._v("\nString callId = CC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ComponentA"')]),s._v(")\n        .setActionName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"showActivity"')]),s._v(")\n        .build()\n        .callAsync("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" IComponentCallback() {\n            "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onResult")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc, CCResult result)")]),s._v(" ")]),s._v("{\n                "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//此onResult在子线程中运行")]),s._v("\n            }\n        });\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//或 异步调用，在主线程执行回调")]),s._v("\nString callId = CC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ComponentA"')]),s._v(")\n        .setActionName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"showActivity"')]),s._v(")\n        .build()\n        .callAsyncCallbackOnMainThread("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" IComponentCallback() {\n            "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onResult")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc, CCResult result)")]),s._v(" ")]),s._v("{\n                "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//此onResult在主线程中运行")]),s._v("\n                String toast = result.isSuccess() ? "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"success"')]),s._v(" : "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"failed"')]),s._v(";\n                Toast.makeText(MainActivity."),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", toast, Toast.LENGTH_SHORT).show();\n            }\n        });\n")])])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},PFDx:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("CC 1.x.x 升级到CC 2.x.x升级指南")]),s._v(" "),e("h3",[s._v("1. 修改根目录build.gradle")]),s._v(" "),e("p",[s._v("从2.0.0开始，CC的自动注册插件从通用的"),e("a",{attrs:{href:"https://github.com/luckybilly/AutoRegister"}},[s._v("AutoRegister")]),s._v("改为定制化的CCRegister\n在根目录需要将插件地址换一下：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("buildscript {\n    dependencies {\n        classpath "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'com.billy.android:autoregister:x.x.x'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//使用最新版")]),s._v("\n    }\n}\n")])]),s._v(" "),e("p",[s._v("改为")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("buildscript {\n    dependencies {\n        classpath "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'com.billy.android:cc-register:x.x.x'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//使用最新版")]),s._v("\n    }\n}\n")])]),s._v(" "),e("h3",[s._v("2. 修改cc-settings.gradle")]),s._v(" "),e("p",[s._v("由于2.0.0开始使用定制化的插件，插件名称发生了变化，并且将许多原来在cc-settings.gradle中的配置已放在插件中完成，减少配置文件的复杂度")]),s._v(" "),e("p",[e("strong",[s._v("为了兼容以前直接apply github上cc-settings.gradle文件的用户，2.0版该gradle文件命名为cc-settings-2.gradle")])]),s._v(" "),e("p",[s._v("从2.0.0版本开始，不再推荐直接依赖github上的cc-settings-2.gradle文件，推荐下载到工程根目录下使用，主要原因有：")]),s._v(" "),e("ul",[e("li",[s._v("github上的文件偶尔会在编译时出现下载失败的情况")]),s._v(" "),e("li",[s._v("cc-settings-2.gradle内容只包含了使用插件和添加对CC库的依赖，其它内容都已移至cc-register插件中维护")]),s._v(" "),e("li",[s._v("此文件是为了给用户避免在每个组件中添加重复的代码使用，可在文件中添加自己的配置逻辑，建议在本地维护")])]),s._v(" "),e("h5",[s._v("2.1 之前依赖的是github上的cc-settings.gradle文件")]),s._v(" "),e("p",[s._v("之前是通过"),e("code",{pre:!0},[s._v("apply from: 'https://raw.githubusercontent.com/luckybilly/CC/master/cc-settings.gradle'")]),s._v("方式接入，按如下方式修改：")]),s._v(" "),e("ul",[e("li",[s._v("未新增/修改任何配置：\n"),e("ul",[e("li",[s._v("下载"),e("code",{pre:!0},[s._v("cc-settings-2.gradle")]),s._v("文件到工程根目录，并使用该文件:"),e("code",{pre:!0},[s._v("apply from: rootProject.file('cc-settings-2.gradle')")])])])]),s._v(" "),e("li",[s._v("有类似于cc-settings-demo.gradle的扩展配置文件：\n"),e("ul",[e("li",[s._v("下载"),e("code",{pre:!0},[s._v("cc-settings-2.gradle")]),s._v("文件到工程根目录，并使用该文件:"),e("code",{pre:!0},[s._v("apply from: rootProject.file('cc-settings-2.gradle')")])]),s._v(" "),e("li",[s._v("将之前在文件中添加的"),e("code",{pre:!0},[s._v("project.ext.registerInfoList.add")]),s._v("改为："),e("code",{pre:!0},[s._v("ccregister.registerInfo.add")]),s._v("放到"),e("code",{pre:!0},[s._v("cc-settings-2.gradle")]),s._v("文件中")])])])]),s._v(" "),e("h5",[s._v("2.2 之前依赖的是本地cc-settings.gradle文件（从github上下载的文件放在工程根目录）")]),s._v(" "),e("p",[s._v("之前是通过"),e("code",{pre:!0},[s._v("apply from: rootProject.file('cc-settings.gradle')")]),s._v("方式接入，按如下方式修改：")]),s._v(" "),e("ul",[e("li",[s._v("未新增/修改任何配置：\n"),e("ul",[e("li",[s._v("重新下载"),e("code",{pre:!0},[s._v("cc-settings-2.gradle")]),s._v("文件并替换原来的"),e("code",{pre:!0},[s._v("cc-settings.gradle")]),s._v("文件（或者复制文件中的内容覆盖原来的内容）")])])]),s._v(" "),e("li",[s._v("有类似于cc-settings-demo.gradle的扩展配置文件：\n"),e("ul",[e("li",[s._v("重新下载"),e("code",{pre:!0},[s._v("cc-settings-2.gradle")]),s._v("文件并替换原来的"),e("code",{pre:!0},[s._v("cc-settings.gradle")]),s._v("文件（或者复制文件中的内容覆盖原来的内容）")]),s._v(" "),e("li",[s._v("将文件中的"),e("code",{pre:!0},[s._v("project.ext.registerInfoList.add")]),s._v("改为："),e("code",{pre:!0},[s._v("ccregister.registerInfo.add")])])])])]),s._v(" "),e("h3",[s._v("3. 调试组件（组件独立以application方式编译运行）")]),s._v(" "),e("p",[s._v("2.0以前，组件切换app/lib运行方式的步骤为：")]),s._v(" "),e("ul",[e("li",[s._v("在local.properties中修改配置： module_name=true")]),s._v(" "),e("li",[s._v("sync 或 clean\n工程比较大的情况下，sync/clean耗时比较长，影响开发效率\n借鉴"),e("a",{attrs:{href:"https://github.com/luojilab/DDComponentForAndroid"}},[s._v("DDComponentForAndroid")]),s._v("的思路：\n让所有组件可直接在Android Studio中点击绿色Run按钮独立运行，无需sync和clean")])]),s._v(" "),e("p",[s._v("在CC 2.0.0及以上版本中：")]),s._v(" "),e("ul",[e("li",[s._v("不在兼容在module/build.gradle中添加"),e("code",{pre:!0},[s._v("ext.runAsApp=true")]),s._v("来实现组件独立运行\n"),e("ul",[e("li",[s._v("但仍然可以通过"),e("code",{pre:!0},[s._v("if (project.ext.runAsApp) { ... }")]),s._v("来判断当前module当前是否以app方式编译运行")])])]),s._v(" "),e("li",[s._v("所有组件可直接在Android Studio中点击绿色Run按钮直接运行\n"),e("ul",[e("li",[s._v("需要注意的是，编译主app时，需要在local.properties添加配置："),e("code",{pre:!0},[s._v("module_name=true")]),s._v(" 将单独运行的组件从主app打包依赖项中排除")])])]),s._v(" "),e("li",[s._v("主app module一直以application方式编译，可以用如下方式来标记：\n"),e("ul",[e("li",[s._v("在module/build.gradle中添加"),e("code",{pre:!0},[s._v("ext.mainApp=true")])])])]),s._v(" "),e("li",[s._v("依赖CC的公共库module（如demo_base/demo_interceptors）一直以library方式编译，可选如下方式中的一种来实现：\n"),e("ul",[e("li",[s._v("直接将CC添加到dependencies列表"),e("code",{pre:!0},[s._v("api 'com.billy.android:cc:x.x.x'")]),s._v("，而不是apply cc-settings-2.gradle文件")]),s._v(" "),e("li",[s._v("或者在apply cc-settings-2.gradle之前添加"),e("code",{pre:!0},[s._v("ext.alwaysLib=true")])])])]),s._v(" "),e("li",[s._v("默认情况下通过assemble命令打包是打apk包，若要打aar包，可用如下方式来实现：\n"),e("ul",[e("li",[s._v("在local.properties中添加"),e("code",{pre:!0},[s._v("assemble_aar_for_cc_component=true")])])])])]),s._v(" "),e("h3",[s._v("4. 启用App内部多进程组件调用功能（如果有需求的话）")]),s._v(" "),e("p",[s._v("注：默认情况下未开启App内部多进程的支持")]),s._v(" "),e("h5",[s._v("4.1 启用多进程支持")]),s._v(" "),e("p",[s._v("可下载"),e("code",{pre:!0},[s._v("cc-settings-2.gradle")]),s._v("文件到本地根目录，并在文件最后添加：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("ccregister.multiProcessEnabled = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n")])]),s._v(" "),e("p",[s._v("并在组件类（"),e("code",{pre:!0},[s._v("IComponent")]),s._v("实现类）上添加一个注解，标明其所在进程（在主进程运行组件无需添加注解）")]),s._v(" "),e("p",[e("strong",[s._v("注意：这样做并不是创建新的进程，而是指定此组件在哪个进程运行（如果AndroidManifest.xml中没有对应的进程，此组件无效）")])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("DemoComponent")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("implements")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("IComponent")])]),s._v("{} "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//DemoComponent组件在主进程运行")]),s._v("\n@SubProcess("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('":yourProcessName"')]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//指定DemoComponentA组件所在的进程名称为 'packageName:yourProcessName'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("DemoComponentA")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("implements")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("IComponent")])]),s._v("{}\n@SubProcess("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a.b.c"')]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//指定DemoComponentB组件所在的进程名称为 'a.b.c'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("DemoComponentB")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("implements")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("IComponent")])]),s._v("{}\n@AllProcess         "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//指定DemoComponentC组件在主进程和所有子进程内都存在，每个进程调用进程内部的DemoComponentC组件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("DemoComponentC")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("implements")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("IComponent")])]),s._v("{}\n")])]),s._v(" "),e("h5",[s._v("4.2 排除App中没有组件的进程名称")]),s._v(" "),e("p",[s._v("为了支持多进程通信，CCRegister插件会在编译时扫描合并后的"),e("code",{pre:!0},[s._v("AndroidManifest.xml")]),s._v("文件中所有四大组件\n收集所有子进程名称，为每个子进程生成一个"),e("code",{pre:!0},[s._v("RemoteProvider")]),s._v("的子类并注册到"),e("code",{pre:!0},[s._v("AndroidManifest.xml")]),s._v("文件中")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("这样做是因为：\n如果放在Transform.transform方法中修改，在扫描完class代码之后再修改AndroidManifest.xml，无效\n欢迎提PR优化\n")])]),s._v(" "),e("p",[s._v("这将导致一些不含有子进程组件的进程也会生成一个没有任何作用的"),e("code",{pre:!0},[s._v("RemoteProvider")]),s._v("的子类，这会额外带来一点点内存消耗。\n虽然这种内存消耗是可以基本忽略的，但是还是可以通过如下方式添加配置来避免：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("ccregister.excludeProcessNames = ["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("':pushservice'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("':processNameB'")]),s._v("]\n")])]),s._v(" "),e("h5",[s._v("4.3 动态组件不支持"),e("code",{pre:!0},[s._v("@SubProcess")]),s._v("及"),e("code",{pre:!0},[s._v("@AllProcess")]),s._v("注解")]),s._v(" "),e("p",[s._v("动态组件在其被注册的进程中运行，如：在主进程中调用"),e("code",{pre:!0},[s._v("CC.registerComponent(dynamicComponent);")]),s._v(",dynamicComponent将在主进程中运行")]),s._v(" "),e("h3",[s._v("5 关于性能")]),s._v(" "),e("p",[s._v("5.1 关于CC调用日志")]),s._v(" "),e("p",[s._v("开启verbose日志("),e("code",{pre:!0},[s._v("CC.enableVerboseLog(true);")]),s._v(")后\n由于会频繁调用"),e("code",{pre:!0},[s._v("cc.toString()")]),s._v("、"),e("code",{pre:!0},[s._v("ccResult.toString()")]),s._v("、"),e("code",{pre:!0},[s._v("remoteCC.toString()")]),s._v("、"),e("code",{pre:!0},[s._v("remoteCCResult.toString()")]),s._v("\n会带来一定的性能损耗\n故在打正式上线包时，一定要将其关闭"),e("code",{pre:!0},[s._v("CC.enableVerboseLog(false);")]),s._v("（默认是关闭状态）")]),s._v(" "),e("p",[s._v("5.2 关于跨App调用")]),s._v(" "),e("p",[s._v("如果要调用的app不是存活状态，或者刚刚重新安装该app或杀掉重启app（这种情况常见于单组件调试时修改代码重新打包运行）\n跨进程调用之前，会先唤醒该app，并通过"),e("code",{pre:!0},[s._v("RemoteProvider")]),s._v("获取调用该进程组件的句柄："),e("code",{pre:!0},[s._v("RemoteCCService")]),s._v("\n由于（app唤醒 -> ContentProvider初始化完成 -> 获取句柄）这个过程需要一定的时间：根据app初始化耗时不同而有差异\n所以：跨app调用时，初次调用会消耗大约100ms左右的时间，但这只在开发期间有影响，不会影响正式产品")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},PXdD:function(s,t,e){s.exports=e("IbfI")},RtP9:function(s,t,e){var a={"./pages/1.x_to_2.x.md":"NJs9","./pages/about.md":"5LCA","./pages/cc-demo.md":"tctl","./pages/cc-error-code-list.md":"lFhr","./pages/cc-functions.md":"zSkI","./pages/cc-principle.md":"jVDM","./pages/changelog.md":"7Q9z","./pages/componentize-gradually.md":"uOw2","./pages/integration-call-component.md":"Kewn","./pages/integration-component-run-alone.md":"84h9","./pages/integration-create-component.md":"AJM0","./pages/integration.md":"KHMt","./pages/manual-CC.md":"1v47","./pages/manual-CCResult.md":"My28","./pages/manual-ICCInterceptor.md":"slqj","./pages/manual-IComponent.md":"hG+J","./pages/manual-IComponentCallback.md":"SjHW","./pages/manual-IDynamicComponent.md":"S3gf","./pages/manual-IGlobalCCInterceptor.md":"vZKb","./pages/manual-IMainThread.md":"ic6L","./pages/manual-IParamJsonConverter.md":"i5NM","./pages/manual-multi-process.md":"PXdD","./pages/practice_1.md":"qQ8P","./pages/practice_2.md":"MLFz","./pages/practice_3.md":"qhEX","./pages/q&a.md":"1sym","./pages/requirements.md":"67Vr","./pages/router_vs_bus.md":"Zm8D"};function r(s){return e(n(s))}function n(s){var t=a[s];if(!(t+1))throw new Error("Cannot find module '"+s+"'.");return t}r.keys=function(){return Object.keys(a)},r.resolve=n,s.exports=r,r.id="RtP9"},S3gf:function(s,t,e){s.exports=e("Vq7X")},SjHW:function(s,t,e){s.exports=e("LMRd")},T8lJ:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("组件独立运行调试")]),s._v(" "),e("p",[s._v("按照"),e("a",{attrs:{href:"#/integration"}},[s._v("集成组件化开发环境")]),s._v("和"),e("a",{attrs:{href:"#/integration-create-component"}},[s._v("创建组件")]),s._v("中的步骤创建好组件module后，组件应该就具备独立运行调试的功能了")]),s._v(" "),e("h3",[s._v("1. 安装运行组件module")]),s._v(" "),e("p",[s._v("在Android Studio工具栏上选择要运行的组件module，并点击绿色Run按钮运行该组件，组件module将以application方式编译打包运行")]),s._v(" "),e("p",[s._v("如果报"),e("code",{pre:!0},[s._v("Default Activity Not Found")]),s._v("的错导致不能编译，其原因是没有设置Launch Activity，解决的办法有：")]),s._v(" "),e("p",[s._v("1)为该module设置不需要Launch Activity，"),e("a",{attrs:{href:"https://blog.csdn.net/Liuhe_5656/article/details/79843222"}},[s._v("参考文章")])]),s._v(" "),e("p",[s._v("2)在src/main/debug/AndroidManifest.xml中设置一个Launch Activity，例如：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-xml"}},[e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("manifest")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("xmlns:android")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"http://schemas.android.com/apk/res/android"')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("package")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"com.billy.android.component.user"')]),s._v(">")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("application")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:name")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"com.billy.debug.DebugApplication"')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:icon")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"@mipmap/ic_launcher"')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:label")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"@string/app_name"')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:theme")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"@style/AppTheme"')]),s._v(" >")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("activity")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:name")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"com.billy.debug.DebugActivity"')]),s._v(" >")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("intent-filter")]),s._v(">")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("action")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:name")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"android.intent.action.MAIN"')]),s._v("/>")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("category")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("android:name")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"android.intent.category.LAUNCHER"')]),s._v(" />")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("intent-filter")]),s._v(">")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("activity")]),s._v(">")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("application")]),s._v(">")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("manifest")]),s._v(">")]),s._v("\n")])]),s._v(" "),e("h3",[s._v("2. 将组件module从主app中排除")]),s._v(" "),e("p",[s._v("由于CC会优先调用app内部的组件，只有在内部找不到对应组件且设置了"),e("code",{pre:!0},[s._v("CC.enableRemoteCC(true)")]),s._v("时才会尝试进行跨app组件调用。")]),s._v(" "),e("p",[s._v("所以，单组件以app运行调试时，如果主app要主动与此组件进行通信，请确保主app中没有包含此组件，做法为：")]),s._v(" "),e("p",[s._v("在工程根目录的"),e("code",{pre:!0},[s._v("local.properties")]),s._v("中添加如下配置，并重新打包运行主app")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-properties"}},[e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("module_name")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("true #module_name为具体每个module的名称，设置为true代表从主app的依赖列表中排除该组件module")]),s._v("\n")])])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},Vq7X:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this.$createElement,t=this._self._c||s;return t("section",[t("h2",[this._v("IComponent介绍")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},"Y/lV":function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("组件化核心引擎（路由 VS 总线）")]),s._v(" "),e("h3",[s._v("相同点")]),s._v(" "),e("p",[s._v("路由和组件总线都需要将分布在不同组件module中的某些类按照一定规则生成映射表（数据结构通常是Map，Key为一个字符串，Value为类或对象）")]),s._v(" "),e("p",[s._v("然后在需要用到的时候从映射表中根据字符串从映射表中取出类或对象")]),s._v(" "),e("h3",[s._v("不同点")]),s._v(" "),e("h4",[s._v("1. 路由方案（如："),e("a",{attrs:{href:"https://github.com/alibaba/ARouter"}},[s._v("ARouter")]),s._v("等）")]),s._v(" "),e("p",[s._v("1.1 "),e("strong",[s._v("路由的本质是类的查找")])]),s._v(" "),e("p",[s._v("其工作原理类似于仓库管理员：大家先把类全部放到仓库中，有人需要的时候，仓库管理员就根据所提供的字符串找出存放在仓库中的类")]),s._v(" "),e("p",[s._v("查找的类主要分为3种：Activity子类、Fragment子类和自定义接口实现类")]),s._v(" "),e("ul",[e("li",[s._v("Activity子类： 路由库提供startActivity(或startActivityForResult)的封装，并根据字符串从映射表中获取对应的Activity类(XxxActivity.class)，跳转到该Activity页面")]),s._v(" "),e("li",[s._v("Fragment子类：路由库根据字符串从映射表中获取对应的Fragment类(XxxFragment.class)并创建一个对象返回给调用方")]),s._v(" "),e("li",[s._v("自定义接口实现类：路由库根据字符串（注解的字符串或者接口类名字符串）从映射表中获取对应接口的实现类（XxxInterfaceImpl.class)，并创建一个对象返回给调用方")])]),s._v(" "),e("p",[s._v("1.2 路由这种一对一的类映射关系理解起来比较容易，特别是页面跳转，使用起来也很方便")]),s._v(" "),e("p",[s._v("1.3 组件之间的服务调用时，调用方需要持有接口类，需要将接口类定义下沉到base层，向接口编程，遵循依赖倒置原则")]),s._v(" "),e("p",[s._v("1.4 由于路由本质是类查找，所以需要通信的组件必须要打包在同一个app内部才能获取到。")]),s._v(" "),e("h4",[s._v("2. 组件总线方案（如："),e("a",{attrs:{href:"https://github.com/luckybilly/CC"}},[s._v("CC")]),s._v("）")]),s._v(" "),e("p",[s._v("2.1 "),e("strong",[s._v("组件总线的本质是转发调用请求")])]),s._v(" "),e("p",[s._v("其工作原理类似于电话接线员（中介者模式）：组件总线负责收集所有组件类并形成映射表（Key为字符串，Value为组件类的对象）。调用组件时，总线根据字符串找到对应的组件类并将调用信息转发给该组件类，组件执行完成后再通过组件总线将结果返回给调用方")]),s._v(" "),e("p",[s._v("2.2 组件总线只负责通信，即转发调用请求和返回执行结果。")]),s._v(" "),e("p",[s._v("2.3 不需要下沉接口，面向通信协议编程（类似于app客户端调用服务器端接口的通信协议）")]),s._v(" "),e("p",[s._v("2.4 由于组件总线的本质是转发调用请求，可以通过跨进程通信方式将调用请求转发给其它app，从而实现跨app进行组件调用。")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("Tips: 跨进程通信的方式有很多种，例如：\nBroadcastReceiver、Socket、FileObserver、MemoryFile、UrlScheme、ContentProvider、AIDL、Messenger及Binder等等\n")])]),s._v(" "),e("p",[s._v("支持跨app的组件调用后，单组件作为app运行时，可以与主app进行通信，调用主app中的所有组件，无需与其他组件一起打包运行，所有的组件都是平行的，没有依赖关系，带来的好处有：")]),s._v(" "),e("ul",[e("li",[s._v("从框架层面避免了组件之间的依赖，做到完全的代码隔离。")]),s._v(" "),e("li",[s._v("组件独立运行时编译速度更快")]),s._v(" "),e("li",[s._v("老项目改造时，从第一个组件开始就可以独立运行，而不会因为需要调用到组件外的功能而必须跟主工程一起打包运行调试")])])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},Zm8D:function(s,t,e){s.exports=e("Y/lV")},aE4u:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("类介绍：CC.java")]),s._v(" "),e("p",[s._v("CC.java是本框架的主入口API，是由ComponentCaller缩写而来，其核心职能是:"),e("strong",[s._v("组件的调用者")]),s._v("。")]),s._v(" "),e("p",[s._v("这个类主要提供以下几种功能：")]),s._v(" "),e("ul",[e("li",[s._v("初始化框架")]),s._v(" "),e("li",[s._v("通过CC.Builder构建一个用于调用组件的CC对象")]),s._v(" "),e("li",[s._v("发起组件调用")]),s._v(" "),e("li",[s._v("根据callId将组件调用结果发送给调用方")]),s._v(" "),e("li",[s._v("根据callId取消某个组件调用")]),s._v(" "),e("li",[s._v("获取组件调用所携带的参数")]),s._v(" "),e("li",[s._v("注册/注销动态组件")]),s._v(" "),e("li",[s._v("注册/注销全局拦截器")])]),s._v(" "),e("h3",[s._v("框架初始化")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/**\n * CC的初始化方法\n * 同时初始化组件和全局拦截器\n * @param app Application\n * @param initComponents 如果设置为true则同时初始化组件\n * @param initGlobalInterceptors 如果设置为true则同时初始化全局拦截器\n */")]),s._v("\nCC.init(Application app, "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" initComponents, "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" initGlobalInterceptors)\n")])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/**\n * CC的初始化方法，仅初始化CC框架本身，不初始化组件类及全局拦截器\n * 组件类及全局拦截器将在第一次执行组件调用时才被初始化\n * @param app Application\n */")]),s._v("\nCC.init(Application app)\n")])]),s._v(" "),e("p",[s._v("开发调试时可以开启以下设置：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//注：请确保正式发布时以下设置均被设置为false（未设置时，其默认值均为false）")]),s._v("\nCC.enableDebug(trueOrFalse); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//开启/关闭 debug日志输出")]),s._v("\nCC.enableVerboseLog(trueOrFalse); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//开启/关闭CC调用的详细跟踪日志输出")]),s._v("\nCC.enableRemoteCC(trueOrFalse); "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//开启/关闭跨app组件调用")]),s._v("\n")])]),s._v(" "),e("h3",[s._v("使用CC.Builder通过链式编程的方式创建一个组件调用请求的CC对象")]),s._v(" "),e("p",[s._v("一次请求对应一个CC对象，CC对象不重复利用")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("这里求一个PR：在框架层面复用CC对象，避免多次创建/销毁带来的损耗\n")])]),s._v(" "),e("p",[s._v("获取一个CC.Builder对象")]),s._v(" "),e("p",[s._v("每次发起组件调用都是从这个方法开始，通过此方法返回的builder对象构建具体的组件调用请求")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/**\n * 创建CC对象的Builder<br>\n * <b>此对象会被CC框架复用，请勿在程序中保存</b>\n * @param componentName 要调用的组件名称\n * @return 创建CC对象的Builder\n */")]),s._v("\nCC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"componentName"')]),s._v(")\n")])]),s._v(" "),e("p",[s._v("CC.Builder构建CC对象设置属性的方法有：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[s._v("CC."),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("setActionName")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(String actionName)")]),s._v("\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//当前组件调用的服务名称(推荐必填)")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("setContext")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(Context context)")]),s._v("\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//通过cc.getContext()能获取此值，若未设置，则返回application对象")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("long")]),s._v(" timeout)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//设置超时时间，单位为毫秒(timeout >= 0)")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("setNoTimeout")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v("\t"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//设置超时时间为无限制（在主线程同步调用时无效）")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("addParam")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(String key, Object value)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//用key-value的方式添加一个参数，通过cc.getParamItem(key)可以获取该参数")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("setParamWithNoKey")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(Object param)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//添加一个参数，但不设置key，通过cc.getParamItemWithNoKey()可以获取该参数。最多只能设置一个")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("addParams")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(Map<String, Object> params)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//添加多个参数")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("setParams")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(Map<String, Object> params)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//设置本次组件调用的参数列表（之前添加的数据将会被清空）")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("withoutGlobalInterceptor")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//设置本次组件调用时禁用所有的全局拦截器(IGlobalCCInterceptor)")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("addInterceptor")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(ICCInterceptor interceptor)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//为本次组件调用添加拦截器（若有多个，可多次添加，按添加的顺序执行）")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("cancelOnDestroyWith")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(Activity activity)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//将本次组件调用与指定activity的生命周期关联起来，在activity.onDestroy()时会自动调用cc.cancel()")]),s._v("\nCC.Builder "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("cancelOnDestroyWith")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(Fragment fragment)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//将本次组件调用与指定fragment的生命周期关联起来，在fragment.onDestroy()时会自动调用cc.cancel()")]),s._v("\nCC "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("build")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//CC对象构建完毕，返回CC对象")]),s._v("\n")])])]),s._v(" "),e("h3",[s._v("启动CC组件调用（一个CC对象只能调用下列方法之一，且只能调用一次）")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("CCResult "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("call")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//开始同步调用组件，返回值为组件调用的结果对象（不管组件的实现方式为同步还是异步）")]),s._v("\nString "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("callAsync")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//开始执行异步调用，返回本次调用的callId，后续可以通过CC.cancel(callId)取消该次调用")]),s._v("\nString "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("callAsync")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(IComponentCallback callback)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//同上，支持设置一个回调对象，用于接收组件调用结果，callback.onResult在子线程运行")]),s._v("\nString "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("callAsyncCallbackOnMainThread")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(IComponentCallback callback)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//同上，但callback.onResult方法在主线程运行")]),s._v("\n")])])]),s._v(" "),e("h3",[s._v("获取CC对象中的参数")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("String "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getComponentName")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//获取cc所调用的组件名称")]),s._v("\nContext "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getContext")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//CC.Builder构建时设置的context对象或者application对象")]),s._v("\nString "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getActionName")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//CC.Builder构建时设置的组件调用的服务名称")]),s._v("\nMap<String, Object> "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getParams")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//获取组件调用的参数列表，主要是CC.Builder设置的参数，可以被拦截器修改")]),s._v("\n<T> T "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getParamItemWithNoKey")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//获取通过setParamWithNoKey(param)设置的参数，通过泛型指定返回值的类型")]),s._v("\n<T> T "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getParamItemWithNoKey")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(T defaultValue)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//同上，支持设置默认值（当没有找到参数时返回默认值）")]),s._v("\n<T> T "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getParamItem")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(String key)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//根据key获取指定的参数，该值可能结果了拦截器的修改，通过泛型指定返回值的类型")]),s._v("\n<T> T "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getParamItem")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(String key, T defaultValue)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//同上，支持设置默认值")]),s._v("\n")])])]),s._v(" "),e("h3",[s._v("将组件调用结果发送给调用方")]),s._v(" "),e("p",[s._v("这个方法特别重要，组件的onCall方法被调用后，请确保在任何情况下都会调用下面的这个方法将当前组件调用的处理结果发送给调用方\n参考"),e("a",{attrs:{href:"#/integration-create-component"}},[s._v("2. 创建组件")]),s._v(" 中的第1.6节的相关介绍")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("sendCCResult")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(String callId, CCResult ccResult)")]),s._v(" \n")])])]),s._v(" "),e("h3",[s._v("其它非静态方法")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("String "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getCallId")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//获取本次组件调用的callId")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("isStopped")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//判断当前CC对象是否已经调用")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("cancel")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//取消调用该组件,返回状态码为：-8")]),s._v("\n")])])]),s._v(" "),e("h3",[s._v("其它静态方法")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("Application "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getApplication")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//获取当前app的application对象，可被全局调用")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("cancel")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(String callId)")]),s._v("  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//取消指定callId对应的组件调用")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//将组件调用结果发送给调用方")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("hasComponent")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(String componentName)")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("registerComponent")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(IDynamicComponent component)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//注册动态组件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("unregisterComponent")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(IDynamicComponent component)")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//注销动态组件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//注册一个全局拦截器,IGlobalCCInterceptor的实现类会被自动注册，")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//若需要不自动注册，自己手动按需注册")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//可定义一个IGlobalCCInterceptor的子接口，实现该接口的全局拦截器将不会自动注册")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("registerGlobalInterceptor")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(IGlobalCCInterceptor interceptor)")]),s._v(" \n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//注销一个全局拦截器（针对通过registerGlobalInterceptor注册的拦截器）")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("unregisterGlobalInterceptor")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(IGlobalCCInterceptor interceptor)")]),s._v(" \n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("isRemoteCCEnabled")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//获取当前是否设置了跨app调用，注意：正式发布前请确保关闭跨app调用")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("isMainProcess")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//获取当前进程是否为主进程")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("isDebugMode")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//获取当前CC是否开启了debug模式")]),s._v("\n")])])])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},fEIn:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("使用CC进行渐进式组件化改造")]),s._v(" "),e("p",[s._v("项目大了，编译慢了，开发效率低了，怎么办？\n也许你已经知道了组件化，但项目迭代任务紧张，根本没有时间进行整体解耦，更害怕一下子改动太大导致的风险不可控，不敢大改，怎么办？")]),s._v(" "),e("p",[s._v("先别急着放弃，渐进式组件化了解一下")]),s._v(" "),e("h2",[s._v("背景故事")]),s._v(" "),e("p",[s._v("在实行组件化改造之前，我们对业内的一些技术文章及开源库进行调研之后，发现基本上千篇一律地都是基于路由这种方案作为通信引擎来实现组件化，重要的是组件化之前得先解耦原来的项目代码。很尴尬，我们没那么人力和时间来一下子做这么一大块事情。这时候我们是这样想的：")]),s._v(" "),s._m(0),s._v(" "),e("p",[s._v("正式由于项目代码耦合度高，解耦困难，而且迭代任务紧张，没办法单独抽出时间来解耦，导致组件化改造一直停留在口头上。")]),s._v(" "),e("p",[s._v("为了在不影响业务迭代业务开发的前提下也能用组件化的形式来进行开发，我们设计了一个支持"),e("font",{attrs:{color:"red"}},[e("strong",[s._v("立即组件化开发 & 渐进式组件化改造")])]),s._v("的框架：CC（已开源，"),e("a",{attrs:{href:"https://github.com/luckybilly/CC"}},[s._v("点这里看源码")]),s._v("）")],1),s._v(" "),e("h2",[s._v("快速了解CC")]),s._v(" "),e("ul",[s._m(1),s._v(" "),e("li",[s._v("支持渐进式组件化改造\n"),e("ul",[e("li",[e("font",{attrs:{color:"red"}},[s._v("解耦只是过程，而不是前提")])],1)])])]),s._v(" "),e("h2",[s._v("用CC来立即开始组件化开发并渐进式地改造你的项目")]),s._v(" "),e("h4",[s._v("先了解一下渐进式组件化改造的概念")]),s._v(" "),e("p",[s._v("以i百联为例（上海百联集团旗下的一个电商App）来看一下组件化之前项目中存在的耦合情况：")]),s._v(" "),s._m(2),s._v(" "),e("p",[s._v("最终项目的耦合状态是这个样子的：")]),s._v(" "),s._m(3),s._v(" "),e("p",[s._v("为了能让大家看得清楚，图片上仅仅列出了有限的几个模块，但即使是这样，我们用一团乱麻来形容它也毫不为过。")]),s._v(" "),e("p",[s._v("我们的工程师一直是在这样的环境下进行业务迭代开发和bug修复，改代码要小心翼翼，生怕引起其它逻辑出bug，最主要的是开发/调试效率非常低：在使用了maven的情况下，在15吋高配的macbook pro上编译运行每次都要花3-5分钟，16GB内存的windows台式机上更是动辄10-15分钟，组件化势在必行。")]),s._v(" "),e("p",[s._v("但业务迭代排期时间非常紧张，测试资源不足，我们需要的是："),e("font",{attrs:{color:"red"}},[e("strong",[s._v("立即组件化开发 & 渐进式组件化改造")])])],1),s._v(" "),e("p",[s._v("在了解渐进式组件化改造之前，先来看看与之相对的非渐进式组件化改造")]),s._v(" "),s._m(4),s._v(" "),e("p",[s._v("非渐进式的组件化方案要求我们必须在组件化初期立即对项目进行解耦，至少是我们需要被新业务调用到的组件需要解耦成组件，否则新业务组件脱离主app单独运行调试的时候无法正常工作。")]),s._v(" "),e("p",[s._v("在渐进式组件化的方案中，可以先不用解耦，只需要让单独运行的组件能够调用到主App中的功能即可。思路是这样的：")]),s._v(" "),s._m(5),s._v(" "),s._m(6),s._v(" "),e("p",[s._v("动画旁白：")]),s._v(" "),s._m(7),s._v(" "),e("h4",[s._v("CC是怎么做到这一点的？")]),s._v(" "),s._m(8),s._v(" "),e("p",[s._v("CC采有2套调用流程：App内部组件调用和跨App调用。")]),s._v(" "),e("p",[s._v("框架在接收到组件调用请求时，优先查看当前App内是否有本次CC调用指定的组件")]),s._v(" "),s._m(9),s._v(" "),s._m(10),s._v(" "),s._m(11),s._v(" "),e("p",[s._v("在这个过程中，CC完成了一次调用请求的转发：查找到组件对象，并将调用其onCall方法，将调用参数发送给它，并将组件执行的结果返回给调用方")]),s._v(" "),s._m(12),s._v(" "),s._m(13),s._v(" "),s._m(14),s._v(" "),e("p",[s._v("组件的执行结果原路返回给调用方")]),s._v(" "),e("p",[s._v("在这个过程中，CC完成了2次调用请求转发：")]),s._v(" "),s._m(15),s._v(" "),e("p",[s._v("可以看出，跨App调用时：")]),s._v(" "),s._m(16),s._v(" "),e("h2",[s._v("总结")]),s._v(" "),e("p",[s._v("本文从我们在实际实施组件化过程中的一些思考入手，引入了渐进式组件化的概念，介绍了用CC来实现"),e("font",{attrs:{color:"red"}},[e("strong",[s._v("立即组件化开发 & 渐进式组件化改造")])]),s._v("的实施步骤。")],1),s._v(" "),e("p",[s._v("并用动画的方式向大家展示了渐进式组件化与非渐进式组件化的区别以及支撑CC实现渐进式组件化的组件调用流程。")]),s._v(" "),e("p",[s._v("本文中的图片及动画取自上周末(6月9日)在爱奇艺移动技术沙龙分享时的演讲稿，PPT文档可在CC交流群("),e("font",{attrs:{color:"red"}},[s._v("QQ群:686844583")]),s._v(")的群文件中下载，欢迎加群交流。")],1)])},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ul",[e("li",[e("p",[s._v("可不可以先不解耦？")]),s._v(" "),e("p",[s._v("这个问题问得好，不先解耦，组件怎么单独以app运行呢？")])]),s._v(" "),e("li",[e("p",[s._v("新业务新module可以无耦合，总可以单独运行调试了吧？")]),s._v(" "),e("p",[s._v("组件需要登录怎么办？\n需要跟其它组件通信怎么办？")])]),s._v(" "),e("li",[e("p",[s._v("用URLScheme来跨app通信总可以了吧？")]),s._v(" "),e("p",[s._v("页面跳转还行，虽然有个中转页面，仅在开发期间使用勉强也能接受\n但如何获取服务？那可是要查找接口的实现类，跨app调用时行吗？")])]),s._v(" "),e("li",[e("p",[s._v("将需要调用的业务代码一起打包总可以了吧？")]),s._v(" "),e("p",[s._v("确实可以，但这些代码在哪里？主app module看一下？\n难不成要跟主app一起打包？没解耦的那些module要全部编译才行哦")])]),s._v(" "),e("li",[e("p",[s._v("那...有没有这样一种方案：让我们"),e("strong",[s._v("可以立即就在新的业务上用组件化的形式进行开发（单组件module以apk的形式编译运行调试，并且可以与其它业务模块互相通信），享受到组件化编译速度快、调试效率高的好处，又不需要马上解耦项目，而是在迭代过程中利用偶尔出现的碎片空闲时间来一个一个慢慢地解耦呢？")])]),s._v(" "),e("p",[s._v("好想法，这就是我们想要的：立即组件化开发 & 渐进式组件化改造\n不过很遗憾，好像没有什么现成的方案可用。\n那我们就自己设计一个吧！")])])])},function(){var s=this.$createElement,t=this._self._c||s;return t("li",[this._v("一静一动，开发时运行2个app：\n"),t("ul",[t("li",[this._v("静：主App (通过跨App的方式单组件App内的组件)")]),this._v(" "),t("li",[this._v("动：单组件App (通过跨App的方式调用主App内的组件)")])])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ul",[e("li",[s._v("先是一个启动页(Splash)，里面会有一些初始化、加载广告等业务，然后跳转到主页，广告可能跳转到商品详情页、用web模块打开H5活动页，存在不少耦合")]),s._v(" "),e("li",[s._v("主页中有：首页、分类、发现、购物车、我的等Fragment页面/业务模块，还要处理push等功能，也会存在不少耦合")]),s._v(" "),e("li",[s._v("首页中需要跳转到商品搜索，还有各种业务Fragment/业务模块，需要跳转商品详情、各种列表页、各种活动H5页面，耦合程度非常高")]),s._v(" "),e("li",[s._v("很多需要用户登录的功能模块都需要耦合登录模块")]),s._v(" "),e("li",[s._v("商品详情页、Web模块等模块几乎所有的业务模块都会用到，耦合程度不言而喻")]),s._v(" "),e("li",[s._v("百联到家、奥莱代购、分享、埋点、收银台、LBS、秒杀等等等等")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/17/16409ff21d62f4d0?w=640&h=368&f=png&s=338918",alt:"组件化之前项目的耦合状态"}})])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/17/16409fdb119412ec?w=774&h=456&f=gif&s=341649",alt:"非渐进式组件化"}})])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ul",[e("li",[s._v("新业务以组件形式开发")]),s._v(" "),e("li",[s._v("新组件需要调用的主App中的业务，在对应的模块中创建一个组件类，对外暴露对应的服务，供其它组件调用，并不需要现在就将这个模块解耦")]),s._v(" "),e("li",[s._v("新组件通过跨App的方式调用主App中的组件")]),s._v(" "),e("li",[s._v("主App也可以通过跨App的方式调用到单独运行的组件App中的组件")]),s._v(" "),e("li",[s._v("在同一个module中可以创建多个组件类，将来解耦时将对应的组件类移动到解耦后的module中即可")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/17/16409fe47b10e7c1?w=774&h=456&f=gif&s=1840869",alt:"渐进式组件化"}})])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ul",[e("li",[s._v("接入CC后，我们的项目就已经组件化完成了")]),s._v(" "),e("li",[s._v("新业务：会员积分，以组件的形式进行开发：创建一个"),e("code",{pre:!0},[s._v("IComponent")]),s._v("接口的实现类，对外暴露自身提供的服务，并且可以独立编译运行调试")]),s._v(" "),e("li",[s._v("会员积分组件需要用到登录、订单和Web模块的功能")]),s._v(" "),e("li",[s._v("在登录、订单、Web模块对应的module或包下创建对应的"),e("code",{pre:!0},[s._v("IComponent")]),s._v("接口实现类，对外暴露自身的服务，让会员积分组件能够跨App调用到这些组件")]),s._v(" "),e("li",[s._v("此时如果我们有时间，可以进行解耦，将相对比较容易解耦的登录模块解耦出来，改造成一个组件")]),s._v(" "),e("li",[s._v("这时候又来了新业务：用户浏览记录，仍然以组件的方式开发")]),s._v(" "),e("li",[s._v("浏览记录组件需要能打开主App的商品详情页，在商品详情页对应的module或包下创建对应的"),e("code",{pre:!0},[s._v("IComponent")]),s._v("接口实现类，对外暴露自身的服务，让浏览记录组件能够跨App调用到商品详情组件")]),s._v(" "),e("li",[s._v("其它的业务也可以用同样的方式来做")]),s._v(" "),e("li",[s._v("利用每个迭代过程中的出现的一些碎片空闲时间，将原来项目中的业务模块逐个从主App中解耦出去变成组件")]),s._v(" "),e("li",[s._v("如果遇到有些几个组件暂时无法完全解耦，但如果作为一个整体可以解耦出来，就像动画中示例的商品详情和订单模块一样，可以将它们作为一个整体解耦出来（一个module，多个"),e("code",{pre:!0},[s._v("IComponent")]),s._v("对应多个组件），等将来有时间了再继续拆分")]),s._v(" "),e("li",[s._v("持续地按照这个思路进行解耦，最终目标是将整个项目中的所有业务模块都解耦出来变成组件")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("首先，CC的核心通信引擎采用的不是路由方案，而是组件总线方案（"),t("a",{attrs:{href:"https://juejin.im/post/5ab5d1726fb9a028ba1f6cb9"}},[this._v("路由 vs 组件总线")]),this._v("）")])},function(){var s=this.$createElement,t=this._self._c||s;return t("ul",[t("li",[this._v("有： 执行App内部组件调用流程")]),this._v(" "),t("li",[this._v("没有：检查当前app是否开启跨app调用功能：\n"),t("ul",[t("li",[this._v("未开启： 返回-5的状态码，代表未找到指定的组件")]),this._v(" "),t("li",[this._v("已开启： 执行跨App组件调用流程")])])])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/17/16409ff94872e784?w=774&h=445&f=gif&s=439136",alt:"App内部调用执行流程"}})])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("采用组件总线的方案，在App内部调用组件时，等效于直接调用"),t("code",{pre:!0},[this._v("IComponent.onCall(cc)")]),this._v("方法，将调用方设置的调用参数传递给组件，组件执行完之后将执行结果返回给调用方，这个过程中没有使用反射，执行效率高")])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("悄悄地告诉你：CC中自带3种AOP策略，例如动画中显示的"),t("code",{pre:!0},[this._v("CustomerInterceptors")]),this._v("就是其中之二：全局拦截器和针对本次CC调用的拦截器。定义一个拦截器也很简单：实现"),t("code",{pre:!0},[this._v("IGlobalCCInterceptor")]),this._v("接口即可")])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/17/16409feccde06b2a?w=774&h=456&f=gif&s=583907",alt:"跨App调用执行流程"}})])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("p",[s._v("通过"),e("code",{pre:!0},[s._v("RemoteCCInterceptor")]),s._v("与另一个App的"),e("code",{pre:!0},[s._v("ComponentService")]),s._v("建立连接，将CC中的调用参数传递给"),e("code",{pre:!0},[s._v("ComponentService")]),s._v("，在"),e("code",{pre:!0},[s._v("ComponentService")]),s._v("中使用这些参数，发起一个App内部的CC调用，最终通过"),e("code",{pre:!0},[s._v("LocalCCInterceptor")]),s._v("调用到"),e("code",{pre:!0},[s._v("IComponent.onCall(cc)")]),s._v("。")])},function(){var s=this.$createElement,t=this._self._c||s;return t("ul",[t("li",[this._v("跨App转发：将调用参数转发给另一个App")]),this._v(" "),t("li",[this._v("App内部转发：找到组件对象，调用其onCall方法将调用参数发送给它")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("ul",[t("li",[this._v("调用组件的代码与在App内部调用时完全一样，无需任何改动")]),this._v(" "),t("li",[this._v("实现组件的代码"),t("code",{pre:!0},[this._v("IComponent.onCall(cc)")]),this._v("方法也是在"),t("code",{pre:!0},[this._v("LocalCCInterceptor")]),this._v("中调用，与在App内部调用时一样")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},gJJx:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this.$createElement,t=this._self._c||s;return t("section",[t("h2",[this._v("IComponent介绍")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},"hG+J":function(s,t,e){s.exports=e("N3O9")},i5NM:function(s,t,e){s.exports=e("8Qys")},ic6L:function(s,t,e){s.exports=e("6tnH")},jVDM:function(s,t,e){s.exports=e("lIWX")},lFhr:function(s,t,e){s.exports=e("6O31")},lIWX:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("CC实现原理")]),s._v(" "),e("h2",[s._v("前言")]),s._v(" "),e("p",[s._v("首先说明一下，本文将讲述的组件化与业内的插件化（如：Atlas, RePlugin等）不是同一个概念")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/9/1603a35e8992e0dd?w=640&h=335&f=jpeg&s=11279",alt:"组件化 vs 插件化"}})]),s._v(" "),e("p",[s._v("【图片来源于网络】")]),s._v(" "),e("p",[s._v("组件化开发：就是将一个app分成多个Module，每个Module都是一个组件(也可以是一个基础库供组件依赖)，开发的过程中我们可以单独调试部分组件，组件间不需要互相依赖，但可以相互调用，最终发布的时候所有组件以lib的形式被主app工程依赖并打包成1个apk。")]),s._v(" "),e("p",[s._v("插件化开发：和组件化开发略有不用，插件化开发时将整个app拆分成很多模块，这些模块包括一个宿主和多个插件，每个模块都是一个apk（组件化的每个模块是个lib），最终打包的时候将宿主apk和插件apk(或其他格式)分开或者联合打包。")]),s._v(" "),e("p",[e("strong",[s._v("本文将主要就以下几个方面进行介绍：")])]),s._v(" "),e("p",[s._v("一、为什么需要组件化？")]),s._v(" "),e("p",[s._v("二、CC技术要点")]),s._v(" "),e("p",[s._v("三、CC执行流程详细解析")]),s._v(" "),e("h2",[s._v("一、为什么需要组件化？")]),s._v(" "),e("p",[s._v("关于使用组件化的理由，上网能搜到很多，如业务隔离、单独以app运行能提高开发及调试效率等等这里就不多重复了，我补充一条：组件化之后，我们能很容易地实现一些组件层面的AOP，例如：")]),s._v(" "),e("ul",[e("li",[s._v("轻易实现页面数据(网络请求、I/O、数据库查询等)预加载的功能")]),s._v(" "),e("li",[s._v("组件被调用时，进行页面跳转的同时异步执行这些耗时逻辑")]),s._v(" "),e("li",[s._v("页面跳转并初始化完成后，再将这些提前加载好的数据展示出来")]),s._v(" "),e("li",[s._v("在组件功能调用时进行登录状态校验")]),s._v(" "),e("li",[s._v("借助拦截器机制，可以动态给组件功能调用添加不同的中间处理逻辑")])]),s._v(" "),e("h2",[s._v("二、 CC技术要点")]),s._v(" "),e("p",[s._v("实现CC组件化开发框架主要需要解决的问题有以下几个方面：")]),s._v(" "),e("ul",[e("li",[s._v("组件如何自动注册？")]),s._v(" "),e("li",[s._v("如何兼容同步/异步方式调用组件？")]),s._v(" "),e("li",[s._v("如何兼容同步/异步方式实现组件？")]),s._v(" "),e("li",[s._v("如何跨app调用组件？")]),s._v(" "),e("li",[s._v("组件如何更方便地在application和library之间切换？")]),s._v(" "),e("li",[s._v("如何实现startActivityForResult？")]),s._v(" "),e("li",[s._v("如何与Activity、Fragment的生命周期关联起来")])]),s._v(" "),e("h3",[s._v("1 组件如何自动注册？")]),s._v(" "),e("p",[s._v("为了减少后期维护成本，想要实现的效果是：当需要添加某个组件到app时，只需要在gradle中添加一下对这个module的依赖即可（通常都是maven依赖，也可以是project依赖）")]),s._v(" "),e("p",[s._v("最初想要使用的是annotationProcessor通过编译时注解动态生成组件映射表代码的方式来实现。但尝试过后发现行不通，因为编译时注解的特性只在源码编译时生效，无法扫描到aar包里的注解（project依赖、maven依赖均无效），也就是说必须每个module编译时生成自己的代码，然后要想办法将这些分散在各aar种的类找出来进行集中注册。")]),s._v(" "),e("p",[s._v("ARouter的解决方案是：")]),s._v(" "),e("ul",[e("li",[s._v("每个module都生成自己的java类，这些类的包名都是'com.alibaba.android.arouter.routes'")]),s._v(" "),e("li",[s._v("然后在运行时通过读取每个dex文件中的这个包下的所有类通过反射来完成映射表的注册，详见"),e("a",{attrs:{href:"https://github.com/alibaba/ARouter/blob/master/arouter-api/src/main/java/com/alibaba/android/arouter/utils/ClassUtils.java"}},[s._v("ClassUtils.java源码")])])]),s._v(" "),e("p",[s._v("运行时通过读取所有dex文件遍历每个entry查找指定包内的所有类名，然后反射获取类对象。这种效率看起来并不高。")]),s._v(" "),e("p",[s._v("ActivityRouter的解决方案是(demo中有2个组件名为'app'和'sdk')：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("在主app module中有一个"),e("code",{pre:!0},[s._v('@Modules({"app", "sdk"})')]),s._v("注解用来标记当前app内有多少组件，根据这个注解生成一个RouterInit类")])]),s._v(" "),e("li",[e("p",[s._v("在RouterInit类的init方法中生成调用同一个包内的RouterMapping_app.map")])]),s._v(" "),e("li",[e("p",[s._v("每个module生成的类(RouterMapping_app.java 和 RouterMapping_sdk.java)都放在com.github.mzule.activityrouter.router包内（在不同的aar中，但包名相同）")])]),s._v(" "),e("li",[e("p",[s._v("在RouterMapping_sdk类的map()方法中根据扫描到的当前module内所有路由注解，生成了调用Routers.map(...)方法来注册路由的代码")])]),s._v(" "),e("li",[e("p",[s._v("在Routers的所有api接口中最终都会触发RouterInit.init()方法，从而实现所有路由的映射表注册")]),s._v(" "),e("p",[s._v('这种方式用一个RouterInit类组合了所有module中的路由映射表类，运行时效率比扫描所有dex文件的方式要高，但需要额外在主工程代码中维护一个组件名称列表注解: @Modules({"app", "sdk"})')])])]),s._v(" "),e("p",[s._v("还有没有更好的办法呢？")]),s._v(" "),e("p",[s._v("Transform API: 可以在编译时(dex/proguard之前)扫描当前要打包到apk中的"),e("strong",[s._v("所有类")]),s._v("，包括: 当前module中java文件编译后的class、aidl文件编译后的class、jar包中的class、aar包中的class、project依赖中的class、maven依赖中的class。")]),s._v(" "),e("p",[s._v("ASM: 可以读取分析字节码、可以修改字节码")]),s._v(" "),e("p",[s._v("二者结合，可以做一个gradle插件，在编译时自动扫描所有组件类(IComponent接口实现类)，然后修改字节码，生成代码调用扫描到的所有组件类的构造方法将其注册到一个组件管理类("),e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/cc/src/main/java/com/billy/cc/core/component/ComponentManager.java"}},[s._v("ComponentManager")]),s._v(")中，生成组件名称与组件对象的映射表。")]),s._v(" "),e("p",[s._v("此gradle插件被命名为："),e("a",{attrs:{href:"https://github.com/luckybilly/AutoRegister"}},[s._v("AutoRegister")]),s._v("，现已开源，并将功能升级为编译时自动扫描任意指定的接口实现类(或类的子类)并自动注册到指定类的指定方法中。只需要在app/build.gradle中配置一下扫描的参数，没有任何代码侵入，原理详细介绍"),e("a",{attrs:{href:"http://blog.csdn.net/cdecde111/article/details/78074692"}},[s._v("传送门")])]),s._v(" "),e("p",[s._v("【2018-10-07补充】开源了一年多的时间，AutoRegister已基本成熟稳定，但为了在插件中实现一些CC框架需要的功能（如：自动生成跨进程通信的RemoteProvider子类并注册到AndroidManifest.xml中），从AutoRegister fork出一份cc-register，从CC2.0.0开始，将使用cc-register插件")]),s._v(" "),e("h3",[s._v("2 如何兼容同步/异步方式调用组件？")]),s._v(" "),e("p",[s._v("通过实现"),e("code",{pre:!0},[s._v("java.util.concurrent.Callable")]),s._v("接口同步返回结果来兼容同步/异步调用：")]),s._v(" "),e("ul",[e("li",[s._v("同步调用时，直接调用"),e("code",{pre:!0},[s._v("CCResult result = Callable.call()")]),s._v("来获取返回结果")]),s._v(" "),e("li",[s._v("异步调用时，将其放入线程池中运行，执行完成后调用回调对象返回结果: "),e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/cc/src/main/java/com/billy/cc/core/component/IComponentCallback.java"}},[s._v("IComponentCallback.onResult(cc, result)")])])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[s._v("ExecutorService.submit(callable)\n")])]),s._v(" "),e("h3",[s._v("3 如何兼容同步/异步方式实现组件？")]),s._v(" "),e("p",[s._v("调用组件的onCall方法时，可能需要异步实现，并不能同步返回结果，但同步调用时又需要返回结果，这是一对矛盾。")]),s._v(" "),e("p",[s._v("此处用到了Object的wait-notify机制，当组件需要异步返回结果时，在CC框架内部进行阻塞，等到结果返回时，通过notify中止阻塞，返回结果给调用方")]),s._v(" "),e("p",[e("em",[s._v("注意，这里要求在实现一个组件时，必须确保组件一定会回调结果，即：需要确保每一种导致调用流程结束的逻辑分支上(包括if-else/try-catch/Activity.finish()-back键-返回按钮等等)都会回调结果，否则会导致调用方一直阻塞等待结果，直至超时。类似于向服务器发送一个网络请求后服务器必须返回请求结果一样，否则会导致请求超时。")])]),s._v(" "),e("h3",[s._v("4 如何跨app调用组件？")]),s._v(" "),e("p",[e("strong",[s._v("为什么需要跨app进行组件调用呢？")])]),s._v(" "),e("ol",[e("li",[s._v("对现有项目进行组件化改造的过程，肯定不是一蹴而就，而是一个个组件逐步从主工程中抽离，这就涉及到主工程与组件间的通信。如果不能跨app进行组件调用，开发时就需要跟主工程一起打包，失去了组件化开发的一个非常大的优势：组件单独编译运行提高开发&测试效率。")]),s._v(" "),e("li",[s._v("当独立运行的组件需要调用到其他组件的功能时，不需要将其他组件编译进来一起打包，可以调用主app中的组件，可以始终保持单module编译运行的状态进行开发。")]),s._v(" "),e("li",[s._v("参考阅读："),e("a",{attrs:{href:"https://github.com/luckybilly/CC/wiki/%E4%BD%BF%E7%94%A8CC%E8%BF%9B%E8%A1%8C%E6%B8%90%E8%BF%9B%E5%BC%8F%E7%BB%84%E4%BB%B6%E5%8C%96%E6%94%B9%E9%80%A0"}},[s._v("使用CC进行渐进式组件化改造")])])]),s._v(" "),e("p",[e("strong",[s._v("目前，常见的组件化框架采用的跨app通信解决方案有：")])]),s._v(" "),e("ul",[e("li",[s._v("URLScheme(如："),e("a",{attrs:{href:"https://github.com/mzule/ActivityRouter"}},[s._v("ActivityRouter")]),s._v("、"),e("a",{attrs:{href:"https://github.com/alibaba/ARouter"}},[s._v("阿里ARouter")]),s._v("等)\n"),e("ul",[e("li",[s._v("优点：\n"),e("ul",[e("li",[s._v("基因中自带支持从webview中调用")]),s._v(" "),e("li",[s._v("不用互相注册（不用知道需要调用的app的进程名称等信息）")])])]),s._v(" "),e("li",[s._v("缺点:\n"),e("ul",[e("li",[s._v("只能单向地给组件发送信息，适用于启动Activity和发送指令，不适用于获取数据(例如：获取用户组件的当前用户登录信息)")]),s._v(" "),e("li",[s._v("需要有个额外的中转Activity来统一处理URLScheme，然后进行转发")]),s._v(" "),e("li",[s._v("如果设备上安装了多个使用相同URLScheme的app，会弹出选择框（多个组件作为app同时安装到设备上时会出现这个问题）")]),s._v(" "),e("li",[s._v("无法进行权限设置，无法进行开关设置，任意app都可调用，存在安全性风险")])])])])]),s._v(" "),e("li",[s._v("AIDL (如："),e("a",{attrs:{href:"https://github.com/SpinyTech/ModularizationArchitecture"}},[s._v("ModularizationArchitecture")]),s._v(")\n"),e("ul",[e("li",[s._v("优点：\n"),e("ul",[e("li",[s._v("可以传递Parcelable类型的对象")]),s._v(" "),e("li",[s._v("效率高")]),s._v(" "),e("li",[s._v("可以设置跨app调用的开关")])])]),s._v(" "),e("li",[s._v("缺点：\n"),e("ul",[e("li",[s._v("调用组件之前需要提前知道该组件在那个进程，否则无法建立ServiceConnection")]),s._v(" "),e("li",[s._v("组件在作为独立app和作为lib打包到主app时，进程名称不同，维护成本高")])])])])])]),s._v(" "),e("p",[s._v("设计此功能时，我的出发点是：作为组件化开发框架基础库，想尽量让跨进程调用与在进程内部调用的功能一致，对使用此框架的开发者在切换app模式和lib模式时尽量简单，另外需要尽量不影响产品安全性。因此，跨组件间通信实现的同时，应该满足以下条件：")]),s._v(" "),e("ul",[e("li",[s._v("每个app都能给其它app调用")]),s._v(" "),e("li",[s._v("app可以设置是否对外提供跨进程组件调用的支持")]),s._v(" "),e("li",[s._v("组件调用的请求发出去之后，能自动探测当前设备上是否有支持此次调用的app")]),s._v(" "),e("li",[s._v("支持超时、取消")])]),s._v(" "),e("p",[s._v("【2018-10-07修改】\nCC 2.0.0版开始对跨进程通信进行了重构，新版本中使用如下方式进行跨进程通信：")]),s._v(" "),e("ul",[e("li",[s._v("将"),e("code",{pre:!0},[s._v("IBinder")]),s._v("封装到一个"),e("code",{pre:!0},[s._v("Parcelable")]),s._v("中")]),s._v(" "),e("li",[s._v("将"),e("code",{pre:!0},[s._v("Parcelable")]),s._v("放入"),e("code",{pre:!0},[s._v("Bundle")]),s._v("中")]),s._v(" "),e("li",[s._v("将"),e("code",{pre:!0},[s._v("Bundle")]),s._v("作为"),e("code",{pre:!0},[s._v("RemoteCursor")]),s._v("的"),e("code",{pre:!0},[s._v("Extras")])]),s._v(" "),e("li",[s._v("通过"),e("code",{pre:!0},[s._v("ContentProvider")]),s._v("传递"),e("code",{pre:!0},[s._v("RemoteCursor")]),s._v("，从而实现IBinder的跨进程传递")]),s._v(" "),e("li",[s._v("通过调用"),e("code",{pre:!0},[s._v("IRemoteCCService.Stub.asInterface(binder)")]),s._v("得到"),e("code",{pre:!0},[s._v("IRemoteCCService")]),s._v("实例:一个"),e("code",{pre:!0},[s._v("RemoteCCService")]),s._v("对象")]),s._v(" "),e("li",[s._v("通过调用"),e("code",{pre:!0},[s._v("IRemoteCCService.call(remoteCC, callback)")]),s._v("实现跨进程组件调用")]),s._v(" "),e("li",[s._v("在"),e("code",{pre:!0},[s._v("IRemoteCCService.call(remoteCC, callback)")]),s._v("方法中根据"),e("code",{pre:!0},[s._v("remoteCC")]),s._v("对象构造一个本地CC请求，并将返回的"),e("code",{pre:!0},[s._v("CCResult")]),s._v("转换成"),e("code",{pre:!0},[s._v("RemoteCCResult")]),s._v("对象，通过"),e("code",{pre:!0},[s._v("callback(remoteCCResult)")]),s._v("将结果回传给调用方进程")]),s._v(" "),e("li",[s._v("调用方进程中将"),e("code",{pre:!0},[s._v("remoteCCResult")]),s._v("转换成本地的"),e("code",{pre:!0},[s._v("CCResult")]),s._v("对象再经过所有拦截器原路返回给组件调用发起方")])]),s._v(" "),e("p",[s._v("如下图所示：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/luckybilly/CC/raw/dev_multiprocess/image/sst/sst_get_remote_service.png",alt:"获取远程IRemoteCCService实例"}})]),s._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/luckybilly/CC/raw/dev_multiprocess/image/sst/sst_call_remote_component.png",alt:"跨进程调用组件"}})]),s._v(" "),e("h3",[s._v("5 组件如何更方便地在application和library之间切换？")]),s._v(" "),e("p",[s._v("关于切换方式在网络上有很多文章介绍，基本上都是一个思路：在module的build.gradle中设置一个变量来控制切换"),e("code",{pre:!0},[s._v("apply plugin: 'com.android.application'")]),s._v("或"),e("code",{pre:!0},[s._v("apply plugin: 'com.android.library'")]),s._v("以及sourceSets的切换。")]),s._v(" "),e("p",[s._v("为了避免在每个module的build.gradle中配置太多重复代码，我将其封装到了cc-register插件中，每个组件都可以直接在android studio中点击绿色的Run按钮直接以application方式单独编译运行。")]),s._v(" "),e("p",[s._v("注意：单独运行的组件app如果要与主app进行相互调用，需要同时在调试设备上安装主app，并且需要确保主app在编译打包时将该组件排除，实现方式为：")]),s._v(" "),e("ul",[e("li",[s._v("确保主app/build.gradle中是使用addComponent来添加对组件module的依赖")]),s._v(" "),e("li",[s._v("在local.properties中增加一行配置"),e("code",{pre:!0},[s._v("module_name=true")])]),s._v(" "),e("li",[s._v("重新编译打包主app")])]),s._v(" "),e("h3",[s._v("6 如何实现startActivityForResult？")]),s._v(" "),e("p",[s._v("android的startActivityForResult的设计也是为了页面传值，在CC组件化框架中，页面传值根本不需要用到startActivityForResult，直接作为异步实现的组件来处理(在原来setResult的地方调用"),e("code",{pre:!0},[s._v("CC.sendCCResult(callId, ccResult)")]),s._v("，"),e("em",[s._v("另外需要注意：按back键及返回按钮的情况也要回调结果")]),s._v(")即可。")]),s._v(" "),e("p",[s._v("如果是原来项目中存在大量的startActivityForResult代码，改造成本较大，可以用下面这种方式来保留原来的onActivityResult(...)及activity中setResult相关的代码：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("在原来调用startActivityForResult的地方，改用CC方式调用，将当前context传给组件")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[s._v("CC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"demo.ComponentA"')]),s._v(")\n  .setContext(context)\n  .addParams("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"requestCode"')]),s._v(", requestCode)\n  .build()\n  .callAsync();\n")])])]),s._v(" "),e("li",[e("p",[s._v("在组件的onCall(cc)方法中用startActivityForResult的方式打开Activity")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[s._v("   "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n   "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onCall")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc)")]),s._v(" ")]),s._v("{\n       Context context = cc.getContext();\n       Object code = cc.getParams().get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"requestCode"')]),s._v(");\n       Intent intent = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Intent(context, ActivityA.class);\n       "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!(context "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" Activity)) {\n           "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//调用方没有设置context或app间组件跳转，context为application")]),s._v("\n           intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n       }\n       "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (context "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" Activity && code != "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(" && code "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" Integer) {\n           ((Activity)context).startActivityForResult(intent, (Integer)code);\n       } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n           context.startActivity(intent);\n       }\n       CC.sendCCResult(cc.getCallId(), CCResult.success());\n       "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("false")]),s._v(";\n   }\n")])])])]),s._v(" "),e("h3",[s._v("7  如何与Activity、Fragment的生命周期关联起来")]),s._v(" "),e("p",[s._v("背景：在使用异步调用时，由于callback对象一般是使用匿名内部类，会持有外部类对象的引用，容易引起内存泄露，这种内存泄露的情况在各种异步回调中比较常见，如Handler.post(runnable)、Retrofit的Call.enqueue(callback)等。")]),s._v(" "),e("p",[s._v("为了避免内存泄露及页面退出后取消执行不必要的任务，CC添加了生命周期关联的功能，在onDestroy方法被调用时自动cancel页面内所有未完成的组件调用")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("Activity生命周期关联")]),s._v(" "),e("p",[s._v("在api level 14 (android 4.0)以上可以通过注册全局activity生命周期回调监听，在"),e("code",{pre:!0},[s._v("onActivityDestroyed")]),s._v("方法中找出所有此activity关联且未完成的cc对象，并自动调用取消功能：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[s._v("application.registerActivityLifecycleCallbacks(lifecycleCallback);\n")])])]),s._v(" "),e("li",[e("p",[s._v("android.support.v4.app.Fragment生命周期关联")]),s._v(" "),e("p",[s._v("support库从 "),e("a",{attrs:{href:"https://developer.android.com/reference/android/support/v4/app/FragmentManager.html#registerfragmentlifecyclecallbacks"}},[s._v("25.1.0")]),s._v(" 开始支持给fragment设置生命周期监听：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[s._v("FragmentManager.registerFragmentLifecycleCallbacks(callback)\n")])]),s._v(" "),e("p",[s._v("可在其"),e("code",{pre:!0},[s._v("onFragmentDestroyed")]),s._v("方法中取消未完成的cc调用")])]),s._v(" "),e("li",[e("p",[s._v("andorid.app.Fragment生命周期关联（暂不支持）")])])]),s._v(" "),e("h2",[s._v("三、 CC执行流程详细解析")]),s._v(" "),e("p",[s._v("组件间通信采用了组件总线的方式，在基础库的组件管理类(ComponentMananger)中注册了所有组件对象，ComponentMananger通过查找映射表找到组件对象并调用。")]),s._v(" "),e("p",[s._v("当ComponentMananger接收到组件的调用请求时，查找当前app内组件清单中是否含有当前需要调用的组件")]),s._v(" "),e("ul",[e("li",[s._v("有： 执行App内部CC调用的流程：")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/9/1603a35e86b8de45?w=686&h=452&f=png&s=36075",alt:"App内部组件调用总线"}})]),s._v(" "),e("ul",[e("li",[e("p",[s._v("没有：执行App之间CC调用的流程")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/9/1603a35e9b27c92e?w=1684&h=642&f=png&s=182899",alt:"App之间组件调用总线"}})])])]),s._v(" "),e("h3",[s._v("1  组件的同步/异步实现和组件的同步/异步调用原理")]),s._v(" "),e("ul",[e("li",[s._v("组件实现时，当组件调用的相关功能结束后，通过CC.sendCCResult(callId, ccResult)将调用结果发送给框架")]),s._v(" "),e("li",[s._v("IComponent实现类(组件入口类)onCall(cc)方法的返回值代表是否异步回调结果：\n"),e("ul",[e("li",[s._v("true:   将异步调用CC.sendCCResult(callId, ccResult)")]),s._v(" "),e("li",[s._v("false: 将同步调用CC.sendCCResult(callId, ccResult)。意味着在onCall方法执行完之前会调用此方法将结果发给框架")])])]),s._v(" "),e("li",[s._v("当IComponent.onCall(cc)返回false时，直接获取CCResult并返回给调用方")]),s._v(" "),e("li",[s._v("当IComponent.onCall(cc)返回true时，将进入wait()阻塞，知道获得CCResult后通过notify()中止阻塞，继续运行，将CCResult返回给调用方")]),s._v(" "),e("li",[s._v("通过ComponentManager调用组件时，创建一个实现了"),e("code",{pre:!0},[s._v("java.util.concurrent.Callable")]),s._v("接口"),e("code",{pre:!0},[s._v("ChainProcessor")]),s._v("类来负责具体组件的调用\n"),e("ul",[e("li",[s._v("同步调用时，直接执行"),e("code",{pre:!0},[s._v("ChainProcessor.call()")]),s._v("来调用组件，并将CCResult直接返回给调用方")]),s._v(" "),e("li",[s._v("异步调用时，将"),e("code",{pre:!0},[s._v("ChainProcessor")]),s._v("放入线程池中执行，通过"),e("code",{pre:!0},[s._v("IComponentCallback.onResult(cc, ccResult)")]),s._v("将CCResult回调给调用方")])])])]),s._v(" "),e("p",[s._v("执行过程如下图所示：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/9/1603a35e88bf52bc?w=1058&h=1159&f=png&s=112868",alt:"CC兼容同步/异步调用和实现原理图"}})]),s._v(" "),e("h3",[s._v("2 自定义拦截器("),e("code",{pre:!0},[s._v("ICCInterceptor")]),s._v(")实现原理")]),s._v(" "),e("ul",[e("li",[s._v("所有拦截器按顺序存放在调用链(Chain)中")]),s._v(" "),e("li",[s._v("先按照优先级执行所有用户自定义全局拦截器("),e("code",{pre:!0},[s._v("ICCGlobalInterceptor")]),s._v("接口实现类)")]),s._v(" "),e("li",[s._v("再按照发起CC调用时添加的顺序执行用户自定义拦截器("),e("code",{pre:!0},[s._v("ICCInterceptor")]),s._v("接口实现类)")]),s._v(" "),e("li",[s._v("然后执行CC框架自身的拦截器"),e("code",{pre:!0},[s._v("ValidateInterceptor")])]),s._v(" "),e("li",[e("code",{pre:!0},[s._v("ValidateInterceptor")]),s._v("将在app内部查找目标组件，根据查找结果添加具体执行调用的拦截器"),e("code",{pre:!0},[s._v("LocalCCInterceptor")]),s._v("（或"),e("code",{pre:!0},[s._v("SubProcessCCInterceptor")]),s._v("、"),e("code",{pre:!0},[s._v("RemoteCCInterceptor")]),s._v(")和"),e("code",{pre:!0},[s._v("Wait4ResultInterceptor")])]),s._v(" "),e("li",[s._v("Chain类负责依次执行所有拦截器"),e("code",{pre:!0},[s._v("interceptor.intercept(chain)")])]),s._v(" "),e("li",[s._v("拦截器"),e("code",{pre:!0},[s._v("intercept(chain)")]),s._v("方法通过调用"),e("code",{pre:!0},[s._v("Chain.proceed()")]),s._v("方法获取CCResult")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/luckybilly/CC/raw/dev_multiprocess/image/sst/sst_cc_interceptors.png",alt:"拦截器调用流程"}})]),s._v(" "),e("h3",[s._v("3 App内部CC调用流程")]),s._v(" "),e("p",[s._v("当要调用的组件在当前app内部时，执行此流程，完整流程图如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/luckybilly/CC/raw/dev_multiprocess/image/lct/lct_in_app.png",alt:"App内部CC调用流程图"}})]),s._v(" "),e("p",[s._v("CC的主体功能由一个个拦截器("),e("code",{pre:!0},[s._v("ICCInterceptor")]),s._v(")来完成，拦截器形成一个调用链("),e("code",{pre:!0},[s._v("Chain")]),s._v(")，调用链由ChainProcessor启动执行，ChainProcessor对象在ComponentManager中被创建。\n因此，可以将ChainProcessor看做一个整体，由ComponentManager创建后，调用组件的onCall方法，并将组件执行后的结果返回给调用方。\nChainProcessor内部的"),e("code",{pre:!0},[s._v("Wait4ResultInterceptor")]),s._v("\nChainProcessor的执行过程可以被timeout和cancel两种事件中止。")]),s._v(" "),e("h3",[s._v("4 App之间CC调用流程")]),s._v(" "),e("p",[s._v("当要调用的组件在当前app内找不到时，执行此流程，完整流程图如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/luckybilly/CC/raw/dev_multiprocess/image/lct/lct_cross_app.png",alt:"App之间CC调用流程图"}})]),s._v(" "),e("h2",[s._v("结语")]),s._v(" "),e("p",[s._v("本文比较详细地介绍了android组件化开发框架《CC》的主要功能、技术方案及执行流程，并给出了使用方式的简单示例。\n大家如果感兴趣的话可以"),e("a",{attrs:{href:"https://github.com/luckybilly/CC"}},[s._v("从GitHub上clone源码")]),s._v("来进行具体的分析，如果有更好的思路和方案也欢迎贡献代码进一步完善CC。")]),s._v(" "),e("h2",[s._v("致谢")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/iqiyi/Andromeda"}},[s._v("Andromeda")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/mzule/ActivityRouter"}},[s._v("ActivityRouter")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/alibaba/ARouter"}},[s._v("ARouter")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/SpinyTech/ModularizationArchitecture"}},[s._v("ModularizationArchitecture")])]),s._v(" "),e("p",[e("a",{attrs:{href:"http://blog.spinytech.com/2016/12/28/android_modularization/"}},[s._v("Android架构思考(模块化、多进程)")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://yq.aliyun.com/articles/71687"}},[s._v("开源最佳实践：Android平台页面路由框架ARouter")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/luojilab/DDComponentForAndroid"}},[s._v("DDComponentForAndroid")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/JumeiRdGroup/Router"}},[s._v("Router")])])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},n1kV:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("集成条件")]),s._v(" "),e("h3",[s._v("Android SDK 要求")]),s._v(" "),e("p",[e("strong",[s._v("Min Sdk Version")]),s._v(" - 使用 CC 需要 min SDK 版本 API "),e("strong",[s._v("8")]),s._v(" ("),e("a",{attrs:{href:"https://developer.android.com/about/versions/android-2.2-highlights.html"}},[s._v("Froyo")]),s._v(") 或更高。")]),s._v(" "),e("p",[e("strong",[s._v("Support Library Version")]),s._v(" - CC 必须使用 API "),e("strong",[e("a",{attrs:{href:"https://developer.android.com/reference/android/support/v4/app/FragmentManager#registerfragmentlifecyclecallbacks"}},[s._v("25.1.0")])]),s._v(" 或更高版本的支持库。")]),s._v(" "),e("h3",[s._v("集成环境要求")]),s._v(" "),e("p",[s._v("CC仅提供在Android studio中以gradle的方式集成")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},nUvY:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("关于 CC")]),s._v(" "),e("p",[s._v("CC是一套Android的组件化框架，由CC核心API类库和cc-register插件组成")]),s._v(" "),s._m(0),s._v(" "),s._m(1),s._v(" "),e("h3",[s._v("CC的特色")]),s._v(" "),e("ul",[s._m(2),s._v(" "),e("li",[s._v("支持"),e("a",{attrs:{href:"#/componentize-gradually"}},[s._v("渐进式组件化改造")]),s._v(" "),e("ul",[e("li",[e("font",{attrs:{color:"red"}},[s._v("解耦只是过程，而不是前提")])],1)])])]),s._v(" "),e("h3",[s._v("一句话介绍CC：")]),s._v(" "),e("p",[s._v("CC是一套基于组件总线的、支持渐进式改造的、支持跨进程调用的、完整的Android组件化框架")]),s._v(" "),s._m(3),s._v(" "),e("p",[s._v("CC的设计灵感来源于服务端的服务化架构，将组件之间的关系拍平，不互相依赖但可以互相调用，不需要再管理复杂的依赖树。")]),s._v(" "),e("h2",[s._v("调用组件API")]),s._v(" "),e("p",[s._v("CC 使用简明的流式语法API，因此它允许你在一行代码搞定组件调用：")]),s._v(" "),s._m(4),s._v(" "),s._m(5),s._v(" "),e("p",[s._v("也可以这样")]),s._v(" "),s._m(6),s._v(" "),e("p",[s._v("或者这样")]),s._v(" "),s._m(7),s._v(" "),e("h2",[s._v("创建组件API")]),s._v(" "),s._m(8),s._v(" "),s._m(9),s._v(" "),e("h3",[s._v("开始使用")]),s._v(" "),e("p",[s._v("CC于2018年9月16日升级到2.0.0版，重构了跨进程通信机制和自动注册插件，并且集成方式有了比较大的变化，此文档仅针对2.x.x版本。")]),s._v(" "),s._m(10),s._v(" "),s._m(11),s._v(" "),s._m(12)])},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[s._v("模块")]),s._v(" "),e("th",{staticStyle:{"text-align":"center"}},[s._v("CC")]),s._v(" "),e("th",{staticStyle:{"text-align":"center"}},[s._v("cc-register")])])]),s._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("当前最新版本")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("a",{attrs:{href:"https://bintray.com/hellobilly/android/cc/_latestVersion"}},[e("img",{attrs:{src:"https://api.bintray.com/packages/hellobilly/android/cc/images/download.svg",alt:"Download"}})])]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("a",{attrs:{href:"https://bintray.com/hellobilly/android/cc-register/_latestVersion"}},[e("img",{attrs:{src:"https://api.bintray.com/packages/hellobilly/android/cc-register/images/download.svg",alt:"Download"}})])])])])])},function(){var s=this.$createElement,t=this._self._c||s;return t("div",{attrs:{align:"center"}},[t("img",{attrs:{src:"https://github.com/luckybilly/CC/raw/master/image/icon.png"}})])},function(){var s=this.$createElement,t=this._self._c||s;return t("li",[this._v("一静一动，开发时运行2个app：\n"),t("ul",[t("li",[this._v("静：主App (通过跨App的方式单组件App内的组件)")]),this._v(" "),t("li",[this._v("动：单组件App (通过跨App的方式调用主App内的组件)")])])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ul",[e("li",[s._v("基于组件总线：\n"),e("ul",[e("li",[s._v("不同于市面上种类繁多的路由框架，CC采用了基于组件总线的架构，不依赖于路由("),e("a",{attrs:{href:"#/router_vs_bus"}},[s._v("路由 VS 总线")])])])]),s._v(" "),e("li",[s._v("支持渐进式改造：\n"),e("ul",[e("li",[s._v("接入CC后可立即用以组件的方式开发新业务，可单独运行调试开发，通过跨app的方式调用项目中原有功能")]),s._v(" "),e("li",[s._v("不需要修改项目中现有的代码，只需要新增一个IComponent接口的实现类（组件类）即可支持新组件的调用")]),s._v(" "),e("li",[s._v("模块解耦不再是前提，将陡峭的组件化改造实施曲线拉平")])])]),s._v(" "),e("li",[s._v("支持跨进程调用：\n"),e("ul",[e("li",[s._v("支持应用内跨进程调用组件，支持跨app调用组件")]),s._v(" "),e("li",[s._v("调用方式与同一个进程内的调用方式完全一致")]),s._v(" "),e("li",[s._v("无需bindService、无需自定义AIDL，无需接口下沉")])])]),s._v(" "),e("li",[s._v("完整：\n"),e("ul",[e("li",[s._v("CC框架下组件提供的服务可以是几乎所有功能，包括但不限于页面跳转、提供服务、获取数据、数据存储等")]),s._v(" "),e("li",[s._v("CC提供了配套插件cc-register，完成了自定义的组件类、全局拦截器类及json转换工具类的自动注册，")]),s._v(" "),e("li",[s._v("cc-register同时还提供了代码隔离、debug代码分离、组件单独调试等各种组件化开发过程中需要的功能")])])])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v('"CC"也是本框架主入口API类的类名，是由ComponentCaller缩写而来，其核心职能是:'),t("strong",[this._v("组件的调用者")]),this._v("。")])},function(){var s=this.$createElement,t=this._self._c||s;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[this._v("CC.obtainBuilder("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[this._v('"ComponentA"')]),this._v(")\n  .setActionName("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[this._v('"showActivity"')]),this._v(")\n  .build()\n  .call();\n")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[this._v("CC.obtainBuilder("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[this._v('"ComponentA"')]),this._v(")\n  .setActionName("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[this._v('"showActivity"')]),this._v(")\n  .build()\n  .callAsync();\n")])])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[s._v("CC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ComponentA"')]),s._v(")\n  .setActionName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"showActivity"')]),s._v(")\n  .build()\n  .callAsyncCallbackOnMainThread("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" IComponentCallback() {\n        "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onResult")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc, CCResult result)")]),s._v(" ")]),s._v("{\n          String toast = result.isSuccess() ? "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"success"')]),s._v(" : "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"failed"')]),s._v(";\n          Toast.makeText(MainActivity."),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", toast, Toast.LENGTH_SHORT).show();\n        }\n    });\n")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("创建一个组件也十分简单：只要创建一个"),t("code",{pre:!0},[this._v("IComponent")]),this._v("接口的实现类，在onCall方法中实现组件暴露的服务即可")])},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ComponentA")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("implements")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("IComponent")]),s._v(" ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" String "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getName")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//指定组件的名称")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ComponentA"')]),s._v(";\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onCall")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc)")]),s._v(" ")]),s._v("{\n    String actionName = cc.getActionName();\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (actionName) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"showActivity"')]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//响应actionName为"showActivity"的组件调用')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//跳转到页面：ActivityA")]),s._v("\n        CCUtil.navigateTo(cc, ActivityA.class);\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//返回处理结果给调用方")]),s._v("\n        CC.sendCCResult(cc.getCallId(), CCResult.success());\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v(";\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//其它actionName当前组件暂时不能响应，可以通过如下方式返回状态码为-12的CCResult给调用方")]),s._v("\n        CC.sendCCResult(cc.getCallId(), CCResult.errorUnsupportedActionName());\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v(";\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("false")]),s._v(";\n  }\n}\n\n")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("如果您使用的是1.x.x版CC，可以参照"),t("a",{attrs:{href:"#/1.x_to_2.x"}},[this._v("2.0版升级指南")]),this._v("中的说明来升级到2.x.x版本")])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("请访问"),t("a",{attrs:{href:"#/requirements"}},[this._v("集成要求")]),this._v("页面，查看集成所需要的前提条件。")])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("然后可以从"),t("a",{attrs:{href:"#/integration"}},[this._v("集成组件化开发环境")]),this._v("页面学习如何集成组件化开发环境，然后再学习如何"),t("a",{attrs:{href:"#/integration-create-component"}},[this._v("创建组件")]),this._v("和"),t("a",{attrs:{href:"#/integration-call-component"}},[this._v("调用组件")]),this._v("。")])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},qQ8P:function(s,t,e){s.exports=e("F/l1")},qT4T:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("常见问题")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("运行demo时调用ComponentB出现页面打不开")]),s._v(" "),e("ul",[e("li",[s._v("2.0.0版以前，请参考"),e("a",{attrs:{href:"https://github.com/luckybilly/CC/issues/5"}},[s._v("issue")])]),s._v(" "),e("li",[s._v('2.0.0版以后，有些高版本手机的权限管理中有"后台弹出界面"的权限设置（比如vivo手机：设置-更多设置-权限管理），给CC和Demo_B开启这个权限即可')])])]),s._v(" "),e("li",[e("p",[s._v("无法调用到组件")]),s._v(" "),e("ol",[e("li",[s._v("请按照README文档的集成说明排查")]),s._v(" "),e("li",[s._v("请确认调用的组件名称(CC.obtainBuilder(componentName)与组件类定定义的名称(getName()的返回值)是否一致")]),s._v(" "),e("li",[s._v("请确认actionName是否与组件中定义的一致")]),s._v(" "),e("li",[s._v("开发阶段，若跨app调用失败(错误码: -5)，请确认在调用组件之前是否启用了跨app组件调用功能：CC.enableRemoteCC(true);")]),s._v(" "),e("li",[s._v("请检查gradle console，查看cc-register打印的自动注册日志,示例如下：")])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("insert register code to file:/Users/billy/Documents/github/CC/demo/build/intermediates/transforms/cc-register/release/0.jar\ncom/billy/cc/demo/component/a/ComponentA\ncom/billy/cc/demo/component/kt/KtComponent\ncom/billy/cc/demo/lifecycle/LifecycleComponent\ncom/billy/cc/demo/component/jsbridge/JsBridgeComponent\ncom/billy/cc/demo/component/jsbridge/WebComponent\ngenerate code into:com/billy/cc/core/component/ComponentManager.class\n\ninsert register code to file:/Users/billy/Documents/github/CC/demo/build/intermediates/transforms/cc-register/release/0.jar\ncom/billy/cc/demo/interceptors/LogInterceptor\ngenerate code into:com/billy/cc/core/component/GlobalCCInterceptorManager.class\n\ninsert register code to file:/Users/billy/Documents/github/CC/demo/build/intermediates/transforms/cc-register/release/0.jar\ncom/billy/cc/demo/base/GsonParamConverter\ngenerate code into:com/billy/cc/core/component/remote/RemoteParamUtil.class\ncc-register insert code cost time: 59 ms\ncc-register generated a provider: /Users/billy/Documents/github/CC/demo/build/intermediates/transforms/cc-register/release/26/com/billy/cc/core/providers/CC_Provider_web.class\ncc-register cost time: 260 ms\n\n")])])]),s._v(" "),e("li",[e("p",[s._v("组件作为app独立运行调试，在主app中调用该组件时，该组件中新增/修改的代码未生效")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  出现这个问题的原因是：\n      主APP打包时已经将该独立运行的组件包含在内了，调用组件时优先调用app内部的组件，从而忽略了独立运行的组件\n  解决方法：\n  1. 在local.properties中新增一行配置 modulename=true //注：modulename为独立运行组件的module名称\n  2. 重新打包运行一次主app module（目的是为了将独立运行的组件module从主app的依赖列表中排除）\n")])])]),s._v(" "),e("li",[e("p",[s._v("调用异步实现的组件时，IComponentCallback.onResult方法没有执行")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  1. 请检查组件实现的代码中是否每个逻辑分支是否最终都会调用CC.sendCCResult(...)方法\n      包括if-else/try-catch/switch-case/按返回键或主动调用finish()等情况\n  2. 请检查组件实现的代码中该action分支是否返回为true \n      返回值的意义在于告诉CC引擎：调用结果是否异步发送(执行CC.sendCCResult(...)方法)\n")])])]),s._v(" "),e("li",[e("p",[s._v("跨app调用组件时，onCall方法执行到了startActivity，但页面没打开")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  1. 请在手机系统的权限管理中对组件所在的app赋予自启动权限\n  2. 请检查被调用的app里是否设置了CC.enableRemoteCC(false)，应该设置为true(默认值为false)\n")])])]),s._v(" "),e("li",[e("p",[s._v("使用ActionProcessor来处理多个action，单独组件作为apk运行时能正常工作，打包到主app中则不能正常工作")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//某个组件使用自定义的cc-settings-2.gradle文件添加了额外的配置时，主工程也要使用相同的gradle文件")]),s._v("\napply "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("from:")]),s._v(" rootProject.file(cc-settings"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-2.")]),s._v("gradle)\n")])]),s._v(" "),e("p",[s._v("参考"),e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/demo/build.gradle"}},[s._v("demo/build.gradle")]),s._v("中的配置")])]),s._v(" "),e("li",[e("p",[s._v("如何实现context.startActivityForResult的功能")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  1. 使用方式同普通页面跳转\n  2. 在onCall方法里返回true\n  3. 在跳转的Activity中回调信息时，不用setResult, 通过CC.sendCCResult(callId, result)来回调结果\n  4. 调用组件时，使用cc.callAsyncCallbackOnMainThread(new IComponentCallback(){...})来接收返回结果\n")])])]),s._v(" "),e("li",[e("p",[s._v("ComponentName和ActionName这些常量字符串如何管理")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  建议采用以下2种方式中的一种来进行管理：\n  1. 每个组件内部维护一个常量类，将组件自己的ComponentName、ActionName及用到的其它组件的字符串统一管理\n  2. 创建一个公共module，为每个组件创建一个常量类，包含对应组件的名称及action字符串\n")])])]),s._v(" "),e("li",[e("p",[s._v("组件之间通信的自定义类型如何处理")]),s._v(" "),e("ul",[e("li",[s._v("下沉到公共库中，作为公共类型\n"),e("ul",[e("li",[s._v("适用于使用频次高或对性能要求特别敏感的场景")])])]),s._v(" "),e("li",[s._v("json传递 & bean冗余：即在每个用到此类型的组件，通过冗余bean的方式来传递\n"),e("ul",[e("li",[s._v("适用于使用频次较低且对性能要求不是十分敏感的场景")])])])]),s._v(" "),e("p",[s._v("demo_component_b中的模拟登录功能"),e("a",{attrs:{href:"../demo_component_b/src/main/java/com/billy/cc/demo/component/b/LoginActivity.java#L89:20"}},[s._v("演示了自定义类型的传递")])])]),s._v(" "),e("li",[e("p",[s._v("主module可以实现IComponent 让其他组件来调用吗？")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  可以，参考demo里的LifecycleComponent\n  就是通过这种方式，让组件module可以调用到未解耦出来的业务，从而达到渐进式组件化的目的\n")])])]),s._v(" "),e("li",[e("p",[s._v("在A Module 的 a 界面 尝试跳转到 B Module 的 b 界面，跳转结果却是再次跳转到 a 界面，是怎么回事呢？")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  请确认是不是布局文件重名了，比如：main_activity.xml\n")])])])]),s._v(" "),e("p",[s._v("未完待续...")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},qhEX:function(s,t,e){s.exports=e("MhgG")},slqj:function(s,t,e){s.exports=e("/DIa")},tO2m:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h1",[s._v("CC框架实践(2)：Fragment和View的组件化")]),s._v(" "),e("h2",[s._v("一、需求背景")]),s._v(" "),e("p",[s._v("在android组件化过程中，你有没有遇到这样的问题：")]),s._v(" "),e("ul",[e("li",[s._v("单Activity + 多Fragment的架构下，如何进行Fragment的组件化？")]),s._v(" "),e("li",[s._v("主界面上的Fragment太多，想用组件化进行管理，该怎么做？")]),s._v(" "),e("li",[s._v("一个功能模块比较独立，但在主界面使用了其中一个Fragment，如何解耦？")]),s._v(" "),e("li",[s._v("对某些View进行了封装或者自定义的View，功能比较独立，是作为基础库通过类依赖使用好还是作为组件使用比较好？如果要作为组件使用，那要如何组件化？")])]),s._v(" "),e("h2",[s._v("二、现有的一些解决方案：")]),s._v(" "),e("ul",[e("li",[s._v("在主app中依赖所有组件，所以在主app中可直接使用这些组件中的Fragment或View的类\n"),e("ul",[e("li",[s._v("直接使用具体的类将产生耦合，违背了组件化的解耦目的")]),s._v(" "),e("li",[s._v("组件之间的fragment引用也需要直接依赖，这样就变成了一个库而非组件")])])]),s._v(" "),e("li",[s._v("使用ARouter来获取Fragment对象来实现Fragment组件化\n"),e("ul",[e("li",[s._v("由于没有Fragment的具体类型，只能调用到系统中Fragment的public方法，不能进行业务通信")]),s._v(" "),e("li",[s._v("由于View的创建需要用到Activity对象(用Application对象会导致Activity设置的Theme样式失效)，无法通过这种方式来获取")])])]),s._v(" "),e("li",[s._v("创建一个公共库，供所有组件依赖，所有组件在初始化时，将组件内的Fragment和View注册到公共库中生成一个映射表。组件通过调用公共库的映射表查找对应的Fragment或View的类\n"),e("ul",[e("li",[s._v("跟用ARouter获取Fragment一样，在组件中无具体类型时无法进行业务通信")]),s._v(" "),e("li",[s._v("如果要用于获取View，其构造方法的参数列表调用方需要了解，在一定程度上也属于类耦合")])])]),s._v(" "),e("li",[s._v("使用ARouter的获取Service方式实现，对外暴露服务，在公共库中定义接口，提供创建、业务通信相关的方法，在组件中实现此接口的具体功能，调用方通过动态获取接口实现类来调用业务功能。这种方式能实现Fragment和View的组件化调用和业务通信，实现的也比较优雅，但接口的管理成本有点高。\n"),e("ul",[e("li",[s._v("接口放在公共库中，一般用以下2种方式实现：\n"),e("ul",[e("li",[s._v("为每个向外提供Fragment或View的组件额外创建一个公共库，供需要调用的组件依赖（感觉好麻烦，还不如直接依赖组件...）")]),s._v(" "),e("li",[s._v("所有组件的这些接口统一放在一个公共库中，供所有组件依赖。但这个库的维护成本就比较高了，每次有新的接口或者原接口新增/修改方法都要修改这个库。")])])])])])]),s._v(" "),e("h2",[s._v("三、在CC框架中如何实现Fragment的组件化？")]),s._v(" "),e("p",[s._v("CC的参数和回调结果使用的数据结构是Map，在app内部可以传递任何类型。")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("通过CC调用获取组件中的Fragment对象")]),s._v(" "),e("p",[s._v("1.1 组件调用方按如下方式调用，并从回调结果中获取Fragment，例如：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[s._v("Fragment fragment = CC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ComponentName"')]),s._v(")\n        .build().call().getDataItem("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"key"')]),s._v(");\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (fragment != "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(") {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//show fragment")]),s._v("\n}\n")])]),s._v(" "),e("p",[s._v("1.2 组件实现方按如下方式设置结果，例如：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[s._v("CC.sendCCResult(cc.getCallId(), CCResult.success("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"key"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" MyFragment()));\n")])])]),s._v(" "),e("li",[e("p",[s._v("与Fragment进行通信")]),s._v(" "),e("p",[s._v("组件化实施的主要目的之一是业务隔离："),e("b",[s._v("只暴露调用协议给外部")]),s._v("("),e("em",[s._v("类似于app端与服务端的通信接口")]),s._v(")，内部实现的更改对外部无影响。甚至组件的插拔和替换都不影响调用方(只要组件调用方做好组件调用失败的降级处理，例如1.1示例代码中的"),e("code",{pre:!0},[s._v("if (fragment != null) {...}")]),s._v("。)")]),s._v(" "),e("p",[s._v("所以，Fragment中的具体业务逻辑应由组件自身内部来实现，在组件调用方(如：Activity)中通过CC调用组件暴露的接口来完成。")]),s._v(" "),e("p",[s._v("2.1 组件调用方将fragment对象及其它参数通过CC传递给组件，例如：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" success = CC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ComponentName"')]),s._v(")\n    .setActionName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"updateTextView"')]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//action名称")]),s._v("\n    .addParam("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"fragment"')]),s._v(", fragment) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//目标fragment对象")]),s._v("\n    .addParam("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"value"')]),s._v(", text) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//设置参数")]),s._v("\n    .build().call().isSuccess();\n")])]),s._v(" "),e("p",[s._v("2.2 组件中接收fragment对象及其它参数，并调用fragment对象的指定方法实现对应的业务，例如：")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("@Override\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("boolean")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("onCall")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(CC cc)")]),s._v(" ")]),s._v("{\n    String actionName = cc.getActionName();\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"updateTextView"')]),s._v(".equals(actionName)) {\n        MyFragment fragment = cc.getParamItem("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"fragment"')]),s._v(");"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//接收fragment对象")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (fragment != "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(") {\n            String text = cc.getParamItem("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"value"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(");"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//接收其它参数")]),s._v("\n            fragment.updateText(text);"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//调用fragment的方法")]),s._v("\n            CC.sendCCResult(cc.getCallId(), CCResult.success());"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//回调结果")]),s._v("\n        } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//回调错误信息")]),s._v("\n            CC.sendCCResult(cc.getCallId(), CCResult.error("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"no fragment params"')]),s._v("));\n        }\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("false")]),s._v(";\n}\n")])])])]),s._v(" "),e("h2",[s._v("五、 View有没有必要组件化？")]),s._v(" "),e("p",[s._v("答案是：对于一些封装过的View、自定义View(特别是第三方自定义View）是有必要的。")]),s._v(" "),e("p",[s._v("理由是：组件化能很好的解耦，将业务实现完全交给组件内部完成，只要接口协议不发生变化，实现方式发生改变时不会影响到使用方式。")]),s._v(" "),e("p",[s._v("网上很多组件化方案中，都是将自定义View(自己写的或者第三方库)作为公共库来使用。如果没有做个适配层(Adapter)而直接使用自定义View的类，将会导致View的耦合度很高，降低系统的扩展性。")]),s._v(" "),e("h2",[s._v("六、在CC框架中如何实现View的组件化？")]),s._v(" "),e("p",[s._v("与Fragment组件化一样，通过CC获取对象和业务调用。")]),s._v(" "),e("p",[s._v("唯一的差别是：在获取View对象时需要将Activity对象传给组件")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-java"}},[s._v("View view = CC.obtainBuilder("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ComponentName"')]),s._v(")\n        .setContext(activity) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//将activity对象传给组件，用于View的初始化")]),s._v("\n        .build().call().getDataItem("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"key"')]),s._v(");\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (view != "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(") {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//add view to container")]),s._v("\n}\n")])]),s._v(" "),e("h2",[s._v("总结")]),s._v(" "),e("p",[s._v("关于android的组件化文章一般都只是介绍如何进行Activity的跳转及服务调用，对于Fragment的组件化一直没有很好的解决，View的组件化几乎没有被提到。")]),s._v(" "),e("p",[s._v("本文介绍了在CC组件化框架下实现Fragment及View组件化的方式，为android工程组件化的道路扫除一个障碍。")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},tctl:function(s,t,e){s.exports=e("D0Bx")},uOw2:function(s,t,e){s.exports=e("fEIn")},uvD0:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h2",[s._v("集成CC step1:建构组件化开发的环境")]),s._v(" "),e("p",[s._v("下面介绍的是在Android Studio中进行集成的方式")]),s._v(" "),e("h4",[s._v("1. 在工程根目录的build.gradle中添加cc-register插件的classpath。")]),s._v(" "),e("p",[s._v("最新版本号："),e("a",{attrs:{href:"https://bintray.com/hellobilly/android/cc-register/_latestVersion"}},[e("img",{attrs:{src:"https://api.bintray.com/packages/hellobilly/android/cc-register/images/download.svg",alt:"Download"}})])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("buildscript {\n    dependencies {\n        classpath "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'com.billy.android:cc-register:x.x.x'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//使用最新版")]),s._v("\n    }\n}\n")])]),s._v(" "),e("h4",[s._v('2. 在工程根目录创建一个名为"cc-settings-2.gradle"的文件，并将以下代码复制到该文件中（也可直接下载github中的'),e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/cc-settings-2.gradle"}},[s._v("cc-settings-2.gradle")]),s._v("文件到工程根目录）")]),s._v(" "),e("p",[s._v("CC最新版："),e("a",{attrs:{href:"https://bintray.com/hellobilly/android/cc/_latestVersion"}},[e("img",{attrs:{src:"https://api.bintray.com/packages/hellobilly/android/cc/images/download.svg",alt:"Download"}})])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-groovy"}},[s._v("project.apply "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("plugin:")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cc-register'")]),s._v("\nproject.dependencies.add("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'api'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"com.billy.android:cc:2.1.2"')]),s._v(") "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//用最新版")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//此文件是作为组件化配置的公共gradle脚本文件，在每个组件中都apply此文件，下载到工程根目录后，可以在下方添加一些自己工程中通用的配置")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 可参考cc-settings-demo.gradle")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 例如：")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//      1. 添加全局拦截器、下沉的公共类库等一些公共基础库的依赖；")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//      2. 添加自定义的通过cc-register实现的自动注册配置")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//      3. 开启app内部多进程支持")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//      4. 其它公共配置信息")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//开启app内部多进程组件调用时启用下面这行代码")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//ccregister.multiProcessEnabled = true")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//开启app内部多进程组件调用时，可以启用下方的配置排除一些进程")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//ccregister.excludeProcessNames = [':pushservice', ':processNameB']")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//按照如下格式添加自定义注册项，可添加多个（也可每次add一个，add多次）")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//ccregister.registerInfo.add([")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//        //在自动注册组件的基础上增加：自动注册组件B的processor")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//        'scanInterface'             : 'com.billy.cc.demo.component.b.processor.IActionProcessor'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//        , 'codeInsertToClassName'   : 'com.billy.cc.demo.component.b.ComponentB'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//        , 'codeInsertToMethodName'  : 'initProcessors'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//        , 'registerMethodName'      : 'add'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//])")]),s._v("\n")])]),s._v(" "),e("hr"),s._v(" "),e("p",[s._v("至此，您已经完成了CC集成的初步工作：建构组件化开发的环境，在此基础上，您可以：")]),s._v(" "),e("ul",[e("li",[s._v("开发新业务：直接以组件的方式开发")]),s._v(" "),e("li",[s._v("解耦老业务：在业务空闲时间一步步解耦")])]),s._v(" "),e("p",[s._v("接下来请通过"),e("a",{attrs:{href:"#/integration-create-component"}},[s._v("创建组件")]),s._v("来了解如何在您的项目中用组件的方式来开发新业务吧！")])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},vZKb:function(s,t,e){s.exports=e("4bn/")},ylqn:function(s,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("section",[e("h1",[s._v("更新日志")]),s._v(" "),e("ul",[e("li",[s._v("2019.01.30 V2.1.2")])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v('1. 修复主线程同步调用跨进程组件时超时设置失效的问题\n2. 升级cc-register插件到1.0.7：修复gradle版本号有多个小数点（如：4.10.1）时cc-register插件报错的问题\n3. 新增一个错误码：-12（组件不支持该actionName）\n      在IComponent.onCall(cc)方法中通过CC.sendCCResult(callId, CCResult.errorUnsupportedActionName())来返回该error\n4. CC支持不使用Key设置一个param，CCResult支持不使用Key设置一个data (建议：仅在只有1个参数的时候使用)：\n\n      //通过setParamWithNoKey添加一个无key的参数（只支持1个）\n      CC.obtainBuilder("ComponentA")...setParamWithNoKey("billy")...build().callAsync();\n      //对应的取值方式为\n      String name = cc.getParamItemWithNoKey();\n      //支持取值时提供一个默认值\n      String name = cc.getParamItemWithNoKey("");\n      \n      //通过successWithNoKey构建一个无key返回值的CCResult（只支持1个）\n      CCResult.successWithNoKey("billy");\n      //对应的取值方式为\n      String name = result.getDataItemWithNoKey();\n      //支持取值时提供一个默认值\n      String name = result.getDataItemWithNoKey("");\n')])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("2018.10.05 V2.1.0")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  1. 在定义组件时可通过实现IMainThread接口指定不同action被调用时component.onCall方法是否在主线程运行\n  2. 使用CCUtil.navigateTo、CCUtil.getNavigateCallId及CCUtil.getNavigateParam等工具方法来简化页面跳转相关的代码\n")])])])]),s._v(" "),e("p",[s._v("链接：")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/cc/src/main/java/com/billy/cc/core/component/IMainThread.java"}},[s._v("IMainThread")]),s._v(" "),e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/cc/src/main/java/com/billy/cc/core/component/CCUtil.java"}},[s._v("CCUtil")])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("2018.09.16 V2.0.0 全新升级")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  1. 重构跨进程通信机制，新增支持应用内部跨进程组件调用\n  2. 新增通过拦截器（继承BaseForwardInterceptor）转发组件调用，可用于A/B-Test\n  3. 自动注册插件从通用的AutoRegister改为CC定制版的cc-register\n  4. 大幅简化cc-settings.gradle，将大部分功能移至cc-register插件中完成\n  5. 优化组件独立运行的步骤：可直接在Android studio中点击运行按钮（主app需要排除当前独立运行的组件，还是通过local.properties中添加module_name=true来实现）\n")])])])]),s._v(" "),e("p",[s._v("详情请看"),e("a",{attrs:{href:"#/1.x_to_2.x"}},[s._v("升级指南")])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("2018.06.04 V1.1.0 重大更新")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  1. 新增支持全局拦截器： \n      实现IGlobalCCInterceptor接口即可，插件会自动完成注册 (配合最新的cc-settings.gradle文件使用)\n      CC调用时，可通过withoutGlobalInterceptor()对当前CC禁用所有全局拦截器\n  2. 跨app调用时，新增支持自定义类型的参数\n      实现IParamJsonConverter接口即可，插件会自动完成注册 (配合最新的cc-settings.gradle文件使用)\n      自定义Bean的类型无需实现Serializable/Parcelable接口\n      需要跨app传递的bean类型需要下沉到公共库，通信双方都依赖此库以实现类型发送和接受\n      参考：LoginActivity\n  3. 新增一种状态码： -11\n      只会在跨app调用组件时发生，代表参数传递错误，可以通过查看Logcat了解详细信息\n  4. 跨app调用默认状态改为关闭，可手动打开： CC.enableRemoteCC(true)\n  5. 修改cc-settings.gradle\n      增加IGlobalCCInterceptor和IParamJsonConverter的自动注册配置\n      将autoregister的参数配置改为可添加的方式(原来是覆盖式),参考：cc-settings-demo.gradle\n")])])])]),s._v(" "),e("p",[s._v("链接：")]),s._v(" "),e("p",[s._v("全局拦截器：\n"),e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/cc/src/main/java/com/billy/cc/core/component/IGlobalCCInterceptor.java"}},[s._v("IGlobalCCInterceptor")])]),s._v(" "),e("p",[s._v("跨app调用时的参数转换工具：\n"),e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/cc/src/main/java/com/billy/cc/core/component/IParamJsonConverter.java"}},[s._v("IParamJsonConverter")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/demo_component_b/src/main/java/com/billy/cc/demo/component/b/LoginActivity.java"}},[s._v("LoginActivity")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/luckybilly/CC/blob/master/cc-settings-demo.gradle"}},[s._v("cc-settings-demo.gradle")])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("2018.05.17 V1.0.0版 Fix issue "),e("a",{attrs:{href:"https://github.com/luckybilly/CC/issues/23"}},[s._v("#23")])]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  修复跨app调用组件时传递的参数为null导致`cc.getParamItem(key)`抛异常的问题\n")])])]),s._v(" "),e("li",[e("p",[s._v("2018.04.06 更新cc-settings.gradle")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  1. 废弃ext.runAsApp参数设置，（目前仍然兼容其功能，但不再推荐使用）\n  2. 新增使用ext.mainApp=true来标记主app module\n  3. 新增依赖组件的方式（功能见README，用法示例见demo/build.gradle）： \n      dependencies {\n          addComponent 'demo_component_a' //会默认添加依赖：project(':demo_component_a')\n          addComponent 'demo_component_kt', project(':demo_component_kt') //module方式\n          addComponent 'demo_component_b', 'com.billy.demo:demo_b:1.1.0'  //maven方式\n      }\n")])])]),s._v(" "),e("li",[e("p",[s._v("2018.02.09 V0.5.0版")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  在组件作为app运行时，通过显式调用如下代码来解决在部分设备上无法被其它app调用的问题\n  CC.enableRemoteCC(true);//建议在Application.onCreate方法中调用\n")])])]),s._v(" "),e("li",[e("p",[s._v("2018.02.07 V0.4.0版")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  异步调用时也支持超时设置(setTimeout)\n")])])]),s._v(" "),e("li",[e("p",[s._v("2017.12.23 V0.3.1版")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  1. 为获取CC和CCResult对象中Map里的对象提供便捷方法，无需再进行类型判断和转换\n      WhateEverClass classObj = cc.getParamItem(String key, WhateEverClass defaultValue)\n      WhateEverClass classObj = cc.getParamItem(String key)\n      WhateEverClass classObj = ccResult.getDataItem(String key, WhateEverClass defaultValue)\n      WhateEverClass classObj = ccResult.getDataItem(String key)\n  2. demo中新增演示跨组件获取Fragment对象\n")])])]),s._v(" "),e("li",[e("p",[s._v("2017.12.09 V0.3.0版")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  添加Activity及Fragment生命周期关联的功能并添加对应的demo\n")])])]),s._v(" "),e("li",[e("p",[s._v("2017.11.29 V0.2.0版")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  将跨进程调用接收LocalSocket信息的线程放入到线程池中\n  完善demo\n")])])]),s._v(" "),e("li",[e("p",[s._v("2017.11.27 V0.1.1版")]),s._v(" "),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":""}},[s._v("  1. 优化超时的处理流程\n  2. 优化异步返回CCResult的处理流程\n")])])]),s._v(" "),e("li",[e("p",[s._v("2017.11.24 V0.1.0版 初次发布")])])])])}]},r=e("VU/8")(null,a,!1,null,null,null);t.default=r.exports},zSkI:function(s,t,e){s.exports=e("+1/S")}});
//# sourceMappingURL=0.bf96b6de04205a8e4318.js.map